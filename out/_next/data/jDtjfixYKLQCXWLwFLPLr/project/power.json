{"pageProps":{"currentProject":{"slug":"power","frontMatter":{"date":"02-05-2023","title":"Power","lang":"Build with React","description":"Branding","image":"/images/project/02.jpg","color":"#BE0000","category":"Product","projectInfo":[{"title":"Client","data":"Power"},{"title":"Timeline","data":"2 Months"},{"title":"Services","data":"- Branding\n- Website design\n- Marketing and Planning\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n## Description.\r\n\r\nThis frontend serves two primary and critical functions: processing an Excel file and handling JSON-formatted data received from the backend. The received data is utilized to create a summarized, tabular visualization of the Excel content, ensuring user-friendly data representation. The frontend operates in close connection with the backend project, Store, establishing a seamless backend-frontend integration to deliver an end-to-end solution as a final product.\r\n\r\nThis project is built using React for the user interface, Sass for styling, and Redux for state management.\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![CocaCola 01.](/images/project/02-01.jpg)\r\n![CocaCola 02.](/images/project/02-02.jpg)\r\n![CocaCola 01.](/images/project/02-03.jpg)\r\n![CocaCola 02.](/images/project/02-04.jpg)\r\n</div>\r\n\r\n\r\n## Send the Excel\r\n\r\nThe ExcelAdIn component in React facilitates Excel file uploads and backend submission. It uses useState for managing file input, validation, and upload readiness, while useDispatch triggers Redux actions. The component validates files against .xlsx or .xls extensions and, upon validation, sends the file to the backend via a POST request at /excel, using FormData. It dynamically renders two views: a file input with a \"Validate\" button for initial upload and a \"Start\" button for submission. Modular CSS ensures styling, creating a user-friendly interface for seamless file upload and backend integration.\r\n\r\n```javascript\r\nconst ExcelAdIn = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [validate, setValidate] = useState(false);\r\n  const [isExcel, setIsExcel] = useState(false);\r\n  const [excelFile, setExcelFile] = useState(undefined);\r\n\r\n  const onSubmit = () => {\r\n    if (excelFile !== undefined) {\r\n      setIsExcel(true);\r\n    }\r\n  };\r\n\r\n  const excelReader = () => {\r\n    const allowedExtensions = ['.xlsx', '.xls'];\r\n\r\n    if (excelFile && allowedExtensions.includes(excelFile.name.slice(-5))) {\r\n      dispatch(excelAction.excelUpLoad(true));\r\n      const formData = new FormData();\r\n      formData.append('file', excelFile);\r\n      fetch('#########', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: formData,\r\n      }).then((response) => console.log(response.json()));\r\n      console.log(formData);\r\n    }\r\n  };\r\n\r\n  const start = (\r\n    <div className={style.container}>\r\n      <button className={style.start} onClick={excelReader}>\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  const addExcel = (\r\n    <div className={style.container}>\r\n      {!validate && (\r\n        <div className={style.addExcel}>\r\n          <label htmlFor=\"file-input\" className={style.fileLabel}>\r\n            Add Excel\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".xlsx, .xls\"\r\n            className={style.fileInput}\r\n            onChange={(e) => {\r\n              setExcelFile(e.target.files[0]);\r\n              setValidate(true);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n      {validate && (\r\n        <button className={style.start} onClick={onSubmit}>\r\n          Validate\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return <Fragment>{isExcel ? start : addExcel}</Fragment>;\r\n};\r\n\r\nexport default ExcelAdIn;\r\n```\r\n\r\n\r\n\r\n## Custom Hook for Dynamic API Requests and Data Handling\r\n\r\nThe useQAfetch custom hook is designed to handle API interactions with a backend for various data retrieval or manipulation tasks related to Excel processing. It uses Redux's dispatch to update the application state based on the API responses. Here's a technical explanation:\r\n\r\n1. Hook Structure: The hook defines an asynchronous function, fetchServer, which accepts a string parameter that determines the API endpoint or function to call.\r\n\r\n2. Dynamic Endpoint Selection: Based on the provided string, the function appends it to a base URL to construct the endpoint dynamically. Specific cases, such as \"Count null value,\" \"Excel summary,\" and others, are handled with conditional logic.\r\n\r\n3. API Call: It uses the fetch API to make HTTP GET requests to the backend. If the string corresponds to an \"Under construction\" case, it directly dispatches a placeholder response without making a request.\r\n\r\n4. Response Parsing:\r\nThe response status is validated, and errors are caught and handled gracefully.\r\nFor valid responses, the JSON payload is parsed and structured into a standardized format, with fields like rows, columns, and max_value populated for specific strings.\r\n\r\n5. Data Dispatch: The parsed data is dispatched to the Redux store using an excelAction.excelResponse action. For \"fill NAN W 0,\" the response is further processed into an array before dispatching.\r\n\r\n6. Error Handling: If the request fails, the error message and response code are logged, and a standardized error response is dispatched to maintain consistency in the application's state.\r\n\r\n7. Flexibility: By accepting a string parameter, the hook can reuse the same logic for different backend functionalities, reducing code duplication and enhancing maintainability.\r\n\r\nThis custom hook encapsulates API interaction logic, making it modular and easier to integrate into various components that need backend communication.\r\n\r\n```javascript\r\nconst useQAfetch = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchServer = async (string) => {\r\n    const url = '#########';\r\n    let str = string;\r\n    let responseCode;\r\n    let dataRespons;\r\n    let fillNan = [];\r\n    try {\r\n      let response;\r\n      if (str === 'Count null value') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Excel summary') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Extract value') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Chart') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Under costruction') {\r\n        dataRespons = {\r\n          res: 'Under costruction',\r\n          question: str,\r\n        };\r\n        console.log(dataRespons);\r\n        dispatch(excelAction.excelResponse(dataRespons));\r\n        return;\r\n      } else if (str === 'fill NAN W 0') {\r\n        response = await fetch(url + str);\r\n      } else {\r\n        response = await fetch(url + str);\r\n      }\r\n\r\n      responseCode = response.status;\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (str === 'Count null value') {\r\n        dataRespons = { res: data.value, question: str };\r\n      } else if (str === 'Excel summary') {\r\n        dataRespons = {\r\n          rows: data.rows,\r\n          columns: data.columns,\r\n          col_dtypes: data.col_dtypes,\r\n          max_value: data.max_value,\r\n          min_value: data.min_value,\r\n          question: str,\r\n        };\r\n      } else if (str === 'Extract value') {\r\n        dataRespons = {\r\n          value: data.value,\r\n          columns: data.columns,\r\n          row: data.row,\r\n          question: str,\r\n        };\r\n      } else if ('fill NAN W 0') {\r\n        dataRespons = data;\r\n        for (const key in dataRespons) {\r\n          fillNan.push({\r\n            id: dataRespons[key].column,\r\n            question: str,\r\n            column: dataRespons[key].column,\r\n            value: dataRespons[key].arr,\r\n          });\r\n        }\r\n      } else if (str === 'Chart') {\r\n        dataRespons = { res: data.value, question: str };\r\n      } else {\r\n        dataRespons = {\r\n          res: data.value,\r\n          question: str,\r\n        };\r\n      }\r\n\r\n      if (str === 'fill NAN W 0') {\r\n        dispatch(excelAction.excelResponse(fillNan));\r\n      } else {\r\n        dispatch(excelAction.excelResponse(dataRespons));\r\n      }\r\n    } catch (error) {\r\n      console.log(error, responseCode);\r\n      dataRespons = {\r\n        res: `We tryed to call the server but the server code is ${responseCode}`,\r\n        question: 'Error',\r\n      };\r\n      dispatch(excelAction.excelResponse(dataRespons));\r\n    }\r\n  };\r\n\r\n  return { fetchServer };\r\n};\r\n\r\nexport default useQAfetch;\r\n```\r\n\r\n## Chart Configuration and Visualization\r\n\r\nThe ChartSettings component is responsible for configuring a chart based on the selected columns from an Excel file, interacting with a backend API. Using useSelector, it extracts data from the application state, including existing responses and current chart configurations. The user can select columns for the X and Y axes, as well as the colors associated with them. These settings are then sent to the backend via a POST request in JSON format. If the request is successful, an image file (the generated chart) is returned, processed, and displayed to the user. The component also includes options to reset the current configuration and displays error messages if the data is invalid or the server request fails. All of these operations are handled using React, with state management via useState and useDispatch, and the interface dynamically updates as the user interacts with the data selection components.\r\n\r\n\r\n```javascript\r\nconst ChartSettings = () => {\r\n  const arr = useSelector((select) => select.exe.excelResponse);\r\n  const c = useSelector((state) => state.exe.chart);\r\n  const dispatch = useDispatch();\r\n  const [colXoane, setColXoane] = useState('');\r\n  const [colXtow, setColXtow] = useState('');\r\n  const [colY, setColY] = useState('');\r\n  const [full, setFull] = useState(false);\r\n  const [imageData, setImageData] = useState(null);\r\n  const [s, setS] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n\r\n  const [selectedColorXoane, setSelectedColorXoane] = useState('Blue');\r\n  const [selectedColorXtow, setSelectedColorXtow] = useState('Blue');\r\n\r\n  const handleColorChangeXoane = (event) => {\r\n    setSelectedColorXoane(event.target.value);\r\n  };\r\n  const handleColorChangeXtow = (event) => {\r\n    setSelectedColorXtow(event.target.value);\r\n  };\r\n\r\n  const setCol = (name) => {\r\n    if (colXoane === '') {\r\n      setColXoane(name);\r\n    } else if (colXtow === '') {\r\n      setColXtow(name);\r\n      setFull(true);\r\n    } else if (colXoane !== '' && colXtow !== '') {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const setY = (name) => {\r\n    setColY(name);\r\n  };\r\n\r\n  const json = {\r\n    columnX1: [colXoane, selectedColorXoane],\r\n    columnX2: [colXtow, selectedColorXtow],\r\n    Y: colY,\r\n  };\r\n\r\n  const createChart = async () => {\r\n    try {\r\n      const response = await fetch('#########', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(json),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Eroare la cerere');\r\n      }\r\n      const blob = await response.blob();\r\n      const imageUrl = URL.createObjectURL(blob);\r\n      setImageData(imageUrl);\r\n      dispatch(excelAction.chart(true));\r\n      setS(true);\r\n    } catch (error) {\r\n      console.error(`An error occurred: ${error.message}`);\r\n      setErr('This combination does not make sens');\r\n    }\r\n    console.log(json);\r\n  };\r\n  const restore = () => {\r\n    setColXoane('');\r\n    setColXtow('');\r\n    setColY('');\r\n    setFull(false);\r\n    setImageData(null);\r\n    setS(false);\r\n    setSelectedColorXoane('Blue');\r\n    setSelectedColorXtow('Blue');\r\n    dispatch(excelAction.chart(false));\r\n    setErr(false);\r\n  };\r\n\r\n  const relode = (\r\n    <button className={btn.btn} onClick={restore}>\r\n      relode\r\n    </button>\r\n  );\r\n\r\n  const colNames = arr.res.map((el) => (\r\n    <ChartBtn key={el} name={el} col={el} onClick={full ? setY : setCol} />\r\n  ));\r\n\r\n  const tablesChios = (\r\n    <>\r\n      <table className={style.tableConatiner}>\r\n        <thead>\r\n          <tr>\r\n            <th className={style.thead}>Axis X</th>\r\n            <th className={style.thead}>Color for X</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td\r\n              className={style.tableContent}\r\n              style={{ color: selectedColorXoane, fontWeight: 'bold' }}\r\n            >\r\n              {colXoane}\r\n            </td>\r\n\r\n            <td className={style.tableContent}>\r\n              <select\r\n                className={style.select}\r\n                value={selectedColorXoane}\r\n                onChange={handleColorChangeXoane}\r\n              >\r\n                <option className={style.option} value=\"Blue\">\r\n                  Blue\r\n                </option>\r\n                <option className={style.option} value=\"Red\">\r\n                  Red\r\n                </option>\r\n                <option className={style.option} value=\"Green\">\r\n                  Green\r\n                </option>\r\n                <option className={style.option} value=\"Yellow\">\r\n                  Yellow\r\n                </option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td\r\n              className={style.tableContent}\r\n              style={{ color: selectedColorXtow, fontWeight: 'bold' }}\r\n            >\r\n              {colXtow}\r\n            </td>\r\n\r\n            <td className={style.tableContent}>\r\n              <select\r\n                value={selectedColorXtow}\r\n                onChange={handleColorChangeXtow}\r\n              >\r\n                <option value=\"Blue\">Albastru</option>\r\n                <option value=\"Red\">Roșu</option>\r\n                <option value=\"Green\">Verde</option>\r\n                <option value=\"Yellow\">Galben</option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <table className={style.tableConatiner}>\r\n        <thead>\r\n          <tr>\r\n            <th className={style.thead}>Axis Y</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td className={style.tableContent} style={{ fontWeight: 'bold' }}>\r\n              {colY}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n\r\n  const img = (\r\n    <div className={style.imgChart}>\r\n      {imageData && (\r\n        <img className={style.img} src={imageData} alt=\"Descriere imagine\" />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const chart = (\r\n    <div className={style.create}>\r\n      <div className={style.chartContainerBtn}>\r\n        <svg\r\n          className={style.svgBtn}\r\n          version=\"1.1\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n          viewBox=\"0 0 32 32\"\r\n        >\r\n          <path d=\"M29 0h-26c-1.65 0-3 1.35-3 3v26c0 1.65 1.35 3 3 3h26c1.65 0 3-1.35 3-3v-26c0-1.65-1.35-3-3-3zM14 24c0 1.1-0.9 2-2 2h-4c-1.1 0-2-0.9-2-2v-16c0-1.1 0.9-2 2-2h4c1.1 0 2 0.9 2 2v16zM26 18c0 1.1-0.9 2-2 2h-4c-1.1 0-2-0.9-2-2v-10c0-1.1 0.9-2 2-2h4c1.1 0 2 0.9 2 2v10z\"></path>\r\n        </svg>\r\n        <button onClick={createChart} className={style.chartBtnStart}>\r\n          Create\r\n        </button>\r\n      </div>\r\n      {err && (\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n          <span style={{ color: 'red' }}>{err}</span>\r\n          {relode}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {!s && colNames}\r\n      {s && relode}\r\n      <div className={s ? style.imgContainer : style.chartContainer}>\r\n        {!s && tablesChios}\r\n        {s ? img : chart}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChartSettings;\r\n```\r\n\r\n\r\n## Conclusion:\r\n\r\nThe front-end implementation demonstrates a well-structured and interactive approach for handling data visualization. It allows users to dynamically select columns for chart creation, customize colors, and submit requests to the backend. The component handles responses efficiently, displaying the generated chart as an image. With a focus on flexibility, it supports multiple combinations of input data and ensures proper error handling to provide a smooth user experience. The inclusion of a reset functionality allows for easy restoration of settings. This front-end approach integrates effectively with the backend, ensuring the process from data selection to chart generation is seamless, intuitive, and user-friendly.\r\n"},"nextProject":{"slug":"server","frontMatter":{"date":"01-02-2023","title":"Server","lang":"Build with Python","description":"Branding","image":"/images/project/06.jpg","color":"#038559","category":"Product","projectInfo":[{"title":"Server","data":"BocahKecil"},{"title":"Timeline","data":"3 Months"},{"title":"Services","data":"- Branding\n- Website design\n- Marketing and Planning\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n## We couldn't be happier with the branding strategy developed.\r\n\r\nThroughout the process, Aver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n\r\n<!-- <div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![The Taxi 01.](/images/project/06-01.jpg)\r\n![The Taxi 02.](/images/project/06-02.jpg)\r\n</div> -->\r\n\r\n## Challenge\r\n\r\nChoosing Aver as our branding agency was one of the best decisions we made. Their professionalism, creativity, and dedication made them a true partner in our brand journey. Aver's team took the time to understand our goals and values, crafting a comprehensive brand strategy that perfectly aligned with our vision. They translated this strategy into a visually captivating and impactful visual identity that truly represents our brand essence.\r\n\r\nAver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n\r\n\r\n## Solution\r\n\r\nThe client expresses great satisfaction with their decision to choose Aver as their branding agency, describing it as one of the best decisions they made. Aver is commended for their professionalism, creativity, and dedication, which resulted in a strong partnership throughout the client's brand journey. Aver's team took the time to deeply understand the client's goals and values, leading to the development of a comprehensive brand strategy that aligned perfectly with the client's vision. This strategy was then translated into a visually captivating and impactful visual identity that truly represents the essence of the brand.\r\n\r\nThe client appreciates Aver's collaborative approach and open communication, highlighting the seamless experience they had while working together. The outstanding results achieved by Aver have successfully elevated the client's brand and positioned them for long-term success. Overall, the client expresses utmost satisfaction with the work done by Aver."}},"__N_SSG":true}