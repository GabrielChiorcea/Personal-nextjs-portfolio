{"pageProps":{"homepage":{"frontMatter":{"banner":{"first_name":"Gabriel","last_name":"Chiorcea","image":"/images/author.jpg","bg_text":"Gabriel","description":"I am a technical guy in web and servers, with experience in quickly solving problems and integrating diverse technologies. I have a practical, results-oriented approach and am always eager to learn and optimize existing solutions.\n"},"featuredBy":{"enable":true,"title":"Technology I work with","brands_white":["/images/brands/01-white.svg","/images/brands/02-white.svg","/images/brands/03-white.svg","/images/brands/04-white.svg","/images/brands/05-white.svg"]},"workProcess":{"enable":true,"title":"Process Delivers Value","subtitle":"The approach","steps":[{"title":"Frontend","description":"For front-end development, I primarily work with React, which I consider my main expertise. Additionally, I have experience with C#, but React has been the predominant framework in my projects, allowing me to build dynamic and responsive user interfaces effectively.\n"},{"title":"Backend","description":"In terms of backend development, I have experience working with technologies such as Python and Bash.\n"},{"title":"Database","description":"In terms of database management, I have hands-on experience working with MySQL, PL/SQL, and T-SQL. I am proficient in designing, optimizing, and querying databases to support efficient data storage and retrieval, ensuring seamless integration with applications.\n"}]}},"content":""},"projectPage":{"frontMatter":{"title":"Recent Works"},"content":""},"projects":[{"slug":"Quote","frontMatter":{"date":"06-05-2023","title":"Quote","lang":"Build with React","description":"Facebook functions replica","image":"/images/project/01.jpg","color":"#67A94C","category":"WebApp","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Release date","data":"06-05-2023"},{"title":"Tehnology","data":"- React\n- SASS\n- FireBase\n- Redux\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post   \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n\r\n\r\n## Arhitecture. \r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nThis project is a standalone frontend application built with React, focusing on delivering a streamlined user experience. It does not have a dedicated backend; instead, it relies on Firebase as a Backend-as-a-Service (BaaS) for data storage and real-time functionality. Designed with a mobile-first approach, the application prioritizes optimization for mobile devices, providing core features inspired by Facebook, such as sharing posts and liking them.\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n\r\n![Southpole 02.](/images/project/01.jpg)\r\n![Southpole 04.](/images/project/01-01.jpg)\r\n\r\n</div>\r\n\r\nFor data storage, the application uses a NoSQL Firebase database. User data, such as account creation information, is temporarily stored in the local session (e.g., localStorage or sessionStorage) and then sent to Firebase for permanent storage. Posts and other content-related data are retrieved from Firebase through API calls, often referred to as \"gates.\" These are then integrated into the app's state, which is managed using Redux, ensuring a consistent and efficient flow of information between components.\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nThe application incorporates modern technologies to achieve its functionality. While React serves as the framework for building the user interface, Sass is used for styling, offering modular and reusable designs. Redux is at the core of the app’s state management, enabling smooth synchronization of data such as posts, likes, and shares. Middleware like Redux Thunk facilitates handling asynchronous API calls to Firebase, ensuring organized and efficient state updates.\r\n\r\nThe user interactions within the app are intuitive and align with familiar patterns from social media platforms. For instance, users can share posts or like them, with these actions updating both the local state and Firebase in real-time. Account creation is straightforward, with user details initially stored locally before being validated and saved in Firebase. Posts and related interactions, once fetched, are synchronized with the Redux Store, making them readily accessible across various parts of the application.\r\n\r\n\r\n## Redux Role in the Application \r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nRedux manages the global state of the application, ensuring synchronization between Firebase and the user interface. Upon initialization, all posts are fetched from Firebase and stored in posts, an array that holds all existing posts.\r\n\r\nThe Redux state structure also includes oldPosts for older posts and newpost for newly created ones. When a user adds a new post, it's first stored in newpost, then added to both posts and jokes to keep the UI up-to-date. This allows real-time updates and ensures smooth content management across the application.\r\n\r\n```javascript\r\n name: 'post',\r\n  initialState: {\r\n    posts: [],\r\n    newPost: [],\r\n    topTen: [],\r\n    oldPost: [],\r\n    wellcomeState: 'empty',\r\n    writtenPost: false,\r\n    existUser: false,\r\n    cookieConsent: false,\r\n    deleteAccount: false,\r\n    error: {\r\n      errorMainArr: false,\r\n      errorMajorArr: false,\r\n      formError: false,\r\n      registration: false,\r\n    },\r\n```\r\n\r\n\r\n## Custom Hook for Post Updates (Like/Dislike)\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nIn this application, posts are categorized into two types: those containing obscene words and those that are normal. The like/dislike functionality relies on three key parameters: id, type, and url. The id uniquely identifies a post, type specifies whether it's a like or a dislike, and url determines which division the post belongs to (either containing obscene content or not). This url corresponds to different sections in the database, as the posts are stored separately to simplify analysis of the content.\r\n\r\nTo implement this functionality, a custom hook is designed to handle post updates based on user interaction. The process can be broken down as follows:\r\n\r\n\r\n1. Item 1 URL Fetching from env: Based on the provided url (indicating the division), the custom hook retrieves the corresponding URL stored in the environment file (.env). This URL points to the specific division of posts, allowing for clear separation of content that contains obscene words from normal content.\r\n\r\n2. Item 2 Like/Dislike Action: Once the hook receives the type (either \"like\" or \"dislike\"), it triggers an API call to the appropriate division (using the URL retrieved from env). The post’s unique id is used to fetch the relevant post data for processing.\r\n\r\n3. Item 3 Post Comparison and State Update: After fetching the post, the custom hook compares it to the corresponding entry in the oldPosts array (which holds previously fetched post data). If the post has changed—such as when the like/dislike count has been updated—the hook will update the Redux state with the new data. If the post differs from its previous state, it will be added to the posts array in Redux for UI reactivity.\r\n\r\n4. Item 4 Database Synchronization: Once the UI state is updated with the new like/dislike data, the hook ensures the changes are reflected in the Firebase database by sending an update request, ensuring consistency between the frontend and the backend.\r\n\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\n```javascript\r\nimport { postActions } from '../store/post-slice';\r\nimport { useDispatch } from 'react-redux';\r\nconst useUpdate = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const mapPutVote = async (id, type, url) => {\r\n    const sendId = id;\r\n    const URL = url;\r\n\r\n    let response;\r\n    let comeFrom;\r\n    if (URL === process.env.REACT_APP_URL_POST) {\r\n      comeFrom = 'AllPosts';\r\n      response = await fetch(\r\n        process.env.REACT_APP_PrefixNormalDB + sendId + '.json'\r\n      );\r\n    } else {\r\n      comeFrom = 'MajorPosts';\r\n      response = await fetch(\r\n        process.env.REACT_APP_PrefixMajorDB + sendId + '.json'\r\n      );\r\n    }\r\n    const data = await response.json();\r\n    let notIncremented = data.vote;\r\n    \r\n    let isIncrmented;\r\n\r\n    if (type === 'increment') {\r\n      isIncrmented = ++notIncremented;\r\n    } else if (type === 'decrease' && notIncremented <= 0) {\r\n      isIncrmented = notIncremented;\r\n    } else {\r\n      isIncrmented = --notIncremented;\r\n    }\r\n\r\n    const sendVote = { vote: isIncrmented };\r\n    const newVote = sendVote.vote;\r\n    const sendPayload = {\r\n      comeFrom: comeFrom,\r\n      id: sendId,\r\n      vote: sendVote.vote,\r\n    };\r\n\r\n    let switchedUrl;\r\n\r\n    if (URL === process.env.REACT_APP_URL_BANC) {\r\n      switchedUrl = process.env.REACT_APP_PrefixNormalDB + sendId + '.json';\r\n    } else if (URL === process.env.REACT_APP_URL_MAJOR) {\r\n      switchedUrl = process.env.REACT_APP_PrefixMajorDB + sendId + '.json';\r\n    }\r\n    if (notIncremented > 0) {\r\n      setTimeout(() => {\r\n        fetch(switchedUrl, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify({ vote: newVote }),\r\n        });\r\n      }, 700);\r\n    }\r\n\r\n    dispatch(postActions.upDateOldPosts(sendPayload));\r\n\r\n  };\r\n  return { mapPutVote };\r\n};\r\n\r\nexport default useUpdate;\r\n\r\n```\r\n\r\n\r\n## More\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![Southpole 03.](/images/project/01-02.jpg)\r\n![Southpole 03.](/images/project/01-03.jpg)\r\n<!-- ![Southpole 03.](/images/project/01-03.jpg)\r\n![Southpole 04.](/images/project/01-04.jpg) -->\r\n</div>\r\n\r\n\r\n"},{"slug":"Store","frontMatter":{"date":"02-05-2023","title":"Store","lang":"Build with Python","description":"Excel reading data","image":"/images/project/05.jpg","color":"#BE0000","category":"WebApp","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Release date","data":"07-06-2024"},{"title":"Tehnology","data":"- Python\n- Rest API\n- Panda\n"},{"title":"Functions","data":"- Excel to JSON \n- User account\n- Custome API\n- Chart creation \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n## Arhitecture.\r\n\r\nThis application serves as a backend capable of processing and reading data from Excel files. To utilize this backend and connect it to a frontend, a user account is required. The account is essential as it provides a unique API key for authentication and authorization.\r\n\r\nExcel files are read using Pandas, which converts the file content into a DataFrame. Once transformed into a DataFrame, the data is further converted into JSON format based on the specific functions or filters requested. This enables dynamic and customizable data extraction from the Excel file.\r\n\r\nThe Excel file itself is stored in the database as a binary large object (BLOB), ensuring secure and efficient storage\r\n\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![CocaCola 01.](/images/project/05-01.jpg)\r\n![CocaCola 02.](/images/project/05-02.jpg)\r\n</div>\r\n\r\n\r\n## Get and store the excel file\r\n\r\nThe Excel file is uploaded via the /excel endpoint of the API. At this endpoint, the file undergoes validation to ensure it is an Excel file, even if the frontend does not perform this check. Once validated, the file is renamed for consistency and security.\r\n\r\nThe renaming process involves appending a unique ID, derived from the user’s API key, to the file name. The resulting format is {ID}.xlsx. The renamed file is then securely stored in the database as a BLOB with its new identifier, ensuring traceability and efficient management.\r\n\r\n\r\n```python\r\n@app.route('/excel', methods=['POST'])\r\n@csrf.exempt\r\ndef upload_excel():\r\n    try:\r\n        # Check if a file is present in the request\r\n        if 'file' not in request.files:\r\n            return jsonify({'res': 'No file found in the request'}), 400\r\n        \r\n        file_in = request.files['file']\r\n        id = request.args.get('id')\r\n\r\n        # Validate the user ID parameter\r\n        if not id:\r\n            return jsonify({'res': 'Missing user ID'}), 400\r\n\r\n        # Check if the file name is empty\r\n        if file_in.filename == '':\r\n            return jsonify({'res': 'File name is empty'}), 400\r\n\r\n        # Validate the file extension (only .xlsx and .xls are allowed)\r\n        if not (file_in.filename.endswith('.xlsx') or file_in.filename.endswith('.xls')):\r\n            return jsonify({'res': 'Invalid file type, only Excel files are allowed (.xlsx, .xls)'}), 400\r\n\r\n        file_content = file_in.read()\r\n        \r\n        # Ensure the file is not empty\r\n        if not file_content:\r\n            return jsonify({'res': 'Uploaded file is empty'}), 400\r\n\r\n        # Generate a unique name for the file based on the user ID\r\n        file_name = f\"{id}.xlsx\"\r\n\r\n        # Create a new database record for the Excel file\r\n        new_excel_file = Excel(name=file_name, excel=file_content)\r\n\r\n        # Add the file to the database session and commit\r\n        db.session.add(new_excel_file)\r\n        db.session.commit()\r\n\r\n        return jsonify({'res': 'File uploaded successfully'}), 200\r\n\r\n    except Exception as e:\r\n        # Roll back the database transaction in case of an error\r\n        db.session.rollback()\r\n        print(f\"Error: {e}\")  # Log the error details to the console\r\n        return jsonify({'res': f'An error occurred while processing the file: {str(e)}'}), 500\r\n\r\n```\r\n\r\n## How the backend know what data to give you\r\n\r\nThe below API endpoint, accessible via /<string:para>/<string:ident> with a GET request, dynamically processes Excel files stored in a database. It retrieves the file based on an id query parameter, reads it into a Pandas DataFrame, and executes specific functions depending on the para value (e.g., counting null values, extracting data, summarizing content, filling missing values, or generating charts). The user's existence and identification (ident) are validated against the database, and if necessary, new identification records are created. By utilizing specialized classes (RespondGet and ResponseFill), the endpoint ensures modular and efficient data manipulation while maintaining robust error handling and database consistency.\r\n\r\n\r\n```python\r\n@app.route('/<string:para>/<string:ident>', methods=['GET'])\r\n@csrf.exempt\r\ndef get_with_ident(para, ident):\r\n    identificare = quote(ident)\r\n    id = request.args.get('id')\r\n    filename = str(id)+'.xlsx'\r\n    retrieved_excel_file = Excel.query.filter_by(name=filename).first()\r\n    excel_data = retrieved_excel_file.excel\r\n    excel_df = pd.read_excel(io.BytesIO(excel_data))\r\n    isntance_of_class = RespondGet(excel_df, id)\r\n    isntance_of_fill = ResponseFill(excel_df, id)\r\n    exist = User.query.filter_by(identification=identificare).first()\r\n    identt = Identification.query.filter_by(identification=identificare).first()\r\n\r\n    if(exist != None  and identt != None):\r\n            if para == \"CountNullValue\":\r\n                count = isntance_of_class.resp_get_null()\r\n                return count\r\n            elif para == \"ExtractValue\":\r\n                ex_val = isntance_of_class.resp_get_ex_val()\r\n                return ex_val\r\n            elif para == \"ExcelSummary\":\r\n                sumar = isntance_of_class.resp_get_ex_sumar()\r\n                return sumar\r\n            elif para == 'fillNANW0':\r\n                fill_na = isntance_of_fill.fill_na()\r\n                return fill_na\r\n            elif para == 'Chart':\r\n                chart = isntance_of_class.chart_columns()\r\n                return chart\r\n    elif(exist and identt == None):\r\n\r\n        time = datetime.now()\r\n        ident = Identification(timestamp=time, identification= identificare)\r\n        db.session.add(ident)\r\n        db.session.commit()\r\n        if para == \"CountNullValue\":\r\n            count = isntance_of_class.resp_get_null()\r\n            return count\r\n        elif para == \"ExtractValue\":\r\n            ex_val = isntance_of_class.resp_get_ex_val()\r\n            return ex_val\r\n        elif para == \"ExcelSummary\":\r\n            sumar = isntance_of_class.resp_get_ex_sumar()\r\n            return sumar\r\n        elif para == 'fillNANW0':\r\n            fill_na = isntance_of_fill.fill_na()\r\n            return fill_na\r\n        elif para == 'Chart':\r\n            chart = isntance_of_class.chart_columns()\r\n            return chart\r\n    else:\r\n        return jsonify({'val': exist}), 400\r\n```\r\n\r\n\r\n\r\n"},{"slug":"backend","frontMatter":{"date":"02-05-2023","title":"Backend","lang":"Build with Python","description":"Color Splash","image":"/images/project/04.jpg","color":"#307B93","category":"Art","projectInfo":[{"title":"Client","data":"Backend"},{"title":"Timeline","data":"3 Months"},{"title":"Services","data":"- Branding\n- Website design\n- Marketing and Planning\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n## We couldn't be happier with the branding strategy developed.\r\n\r\nThroughout the process, Aver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![Shuvashini 01.](/images/project/04-01.jpg)\r\n![Shuvashini 01.](/images/project/04-02.jpg)\r\n</div>\r\n\r\n\r\n## Challenge\r\n\r\nChoosing Aver as our branding agency was one of the best decisions we made. Their professionalism, creativity, and dedication made them a true partner in our brand journey. Aver's team took the time to understand our goals and values, crafting a comprehensive brand strategy that perfectly aligned with our vision. They translated this strategy into a visually captivating and impactful visual identity that truly represents our brand essence.\r\n\r\nAver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n\r\n\r\n## Solution\r\n\r\nThe client expresses great satisfaction with their decision to choose Aver as their branding agency, describing it as one of the best decisions they made. Aver is commended for their professionalism, creativity, and dedication, which resulted in a strong partnership throughout the client's brand journey. Aver's team took the time to deeply understand the client's goals and values, leading to the development of a comprehensive brand strategy that aligned perfectly with the client's vision. This strategy was then translated into a visually captivating and impactful visual identity that truly represents the essence of the brand.\r\n\r\nThe client appreciates Aver's collaborative approach and open communication, highlighting the seamless experience they had while working together. The outstanding results achieved by Aver have successfully elevated the client's brand and positioned them for long-term success. Overall, the client expresses utmost satisfaction with the work done by Aver.\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![Shuvashini 01.](/images/project/04-01.jpg)\r\n![Shuvashini 01.](/images/project/04-02.jpg)\r\n</div>"},{"slug":"checker","frontMatter":{"date":"02-05-2023","title":"Checker","lang":"Build with C#","description":"Branding","image":"/images/project/03.jpg","color":"#BF4106","category":"Fashion","projectInfo":[{"title":"Client","data":"Checker"},{"title":"Timeline","data":"3 Months"},{"title":"Services","data":"- Branding\n- Website design\n- Marketing and Planning\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n## We couldn't be happier with the branding strategy developed.\r\n\r\nThroughout the process, Aver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n\r\n![Zimmer 02.](/images/project/03-02.jpg)\r\n![Zimmer 01.](/images/project/03-01.jpg)\r\n\r\n</div>\r\n\r\n## Challenge\r\n\r\nChoosing Aver as our branding agency was one of the best decisions we made. Their professionalism, creativity, and dedication made them a true partner in our brand journey. Aver's team took the time to understand our goals and values, crafting a comprehensive brand strategy that perfectly aligned with our vision. They translated this strategy into a visually captivating and impactful visual identity that truly represents our brand essence.\r\n\r\nAver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n\r\n\r\n## Solution\r\n\r\nThe client expresses great satisfaction with their decision to choose Aver as their branding agency, describing it as one of the best decisions they made. Aver is commended for their professionalism, creativity, and dedication, which resulted in a strong partnership throughout the client's brand journey. Aver's team took the time to deeply understand the client's goals and values, leading to the development of a comprehensive brand strategy that aligned perfectly with the client's vision. This strategy was then translated into a visually captivating and impactful visual identity that truly represents the essence of the brand.\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n\r\n![Zimmer 03.](/images/project/03-03.jpg)\r\n![Zimmer 03.](/images/project/03-04.jpg)\r\n\r\n</div>\r\n\r\nThe client appreciates Aver's collaborative approach and open communication, highlighting the seamless experience they had while working together. The outstanding results achieved by Aver have successfully elevated the client's brand and positioned them for long-term success. Overall, the client expresses utmost satisfaction with the work done by Aver."},{"slug":"power","frontMatter":{"date":"02-05-2023","title":"Power","lang":"Build with React","description":"Branding","image":"/images/project/02.jpg","color":"#BE0000","category":"Product","projectInfo":[{"title":"Client","data":"Power"},{"title":"Timeline","data":"2 Months"},{"title":"Services","data":"- Branding\n- Website design\n- Marketing and Planning\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n## Description.\r\n\r\nThis frontend serves two primary and critical functions: processing an Excel file and handling JSON-formatted data received from the backend. The received data is utilized to create a summarized, tabular visualization of the Excel content, ensuring user-friendly data representation. The frontend operates in close connection with the backend project, Store, establishing a seamless backend-frontend integration to deliver an end-to-end solution as a final product.\r\n\r\nThis project is built using React for the user interface, Sass for styling, and Redux for state management.\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![CocaCola 01.](/images/project/02-01.jpg)\r\n![CocaCola 02.](/images/project/02-02.jpg)\r\n![CocaCola 01.](/images/project/02-03.jpg)\r\n![CocaCola 02.](/images/project/02-04.jpg)\r\n</div>\r\n\r\n\r\n## Send the Excel\r\n\r\nThe ExcelAdIn component in React facilitates Excel file uploads and backend submission. It uses useState for managing file input, validation, and upload readiness, while useDispatch triggers Redux actions. The component validates files against .xlsx or .xls extensions and, upon validation, sends the file to the backend via a POST request at /excel, using FormData. It dynamically renders two views: a file input with a \"Validate\" button for initial upload and a \"Start\" button for submission. Modular CSS ensures styling, creating a user-friendly interface for seamless file upload and backend integration.\r\n\r\n```javascript\r\nconst ExcelAdIn = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [validate, setValidate] = useState(false);\r\n  const [isExcel, setIsExcel] = useState(false);\r\n  const [excelFile, setExcelFile] = useState(undefined);\r\n\r\n  const onSubmit = () => {\r\n    if (excelFile !== undefined) {\r\n      setIsExcel(true);\r\n    }\r\n  };\r\n\r\n  const excelReader = () => {\r\n    const allowedExtensions = ['.xlsx', '.xls'];\r\n\r\n    if (excelFile && allowedExtensions.includes(excelFile.name.slice(-5))) {\r\n      dispatch(excelAction.excelUpLoad(true));\r\n      const formData = new FormData();\r\n      formData.append('file', excelFile);\r\n      fetch('#########', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: formData,\r\n      }).then((response) => console.log(response.json()));\r\n      console.log(formData);\r\n    }\r\n  };\r\n\r\n  const start = (\r\n    <div className={style.container}>\r\n      <button className={style.start} onClick={excelReader}>\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  const addExcel = (\r\n    <div className={style.container}>\r\n      {!validate && (\r\n        <div className={style.addExcel}>\r\n          <label htmlFor=\"file-input\" className={style.fileLabel}>\r\n            Add Excel\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".xlsx, .xls\"\r\n            className={style.fileInput}\r\n            onChange={(e) => {\r\n              setExcelFile(e.target.files[0]);\r\n              setValidate(true);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n      {validate && (\r\n        <button className={style.start} onClick={onSubmit}>\r\n          Validate\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return <Fragment>{isExcel ? start : addExcel}</Fragment>;\r\n};\r\n\r\nexport default ExcelAdIn;\r\n```\r\n\r\n\r\n\r\n## Custom Hook for Dynamic API Requests and Data Handling\r\n\r\nThe useQAfetch custom hook is designed to handle API interactions with a backend for various data retrieval or manipulation tasks related to Excel processing. It uses Redux's dispatch to update the application state based on the API responses. Here's a technical explanation:\r\n\r\n1. Hook Structure: The hook defines an asynchronous function, fetchServer, which accepts a string parameter that determines the API endpoint or function to call.\r\n\r\n2. Dynamic Endpoint Selection: Based on the provided string, the function appends it to a base URL to construct the endpoint dynamically. Specific cases, such as \"Count null value,\" \"Excel summary,\" and others, are handled with conditional logic.\r\n\r\n3. API Call: It uses the fetch API to make HTTP GET requests to the backend. If the string corresponds to an \"Under construction\" case, it directly dispatches a placeholder response without making a request.\r\n\r\n4. Response Parsing:\r\nThe response status is validated, and errors are caught and handled gracefully.\r\nFor valid responses, the JSON payload is parsed and structured into a standardized format, with fields like rows, columns, and max_value populated for specific strings.\r\n\r\n5. Data Dispatch: The parsed data is dispatched to the Redux store using an excelAction.excelResponse action. For \"fill NAN W 0,\" the response is further processed into an array before dispatching.\r\n\r\n6. Error Handling: If the request fails, the error message and response code are logged, and a standardized error response is dispatched to maintain consistency in the application's state.\r\n\r\n7. Flexibility: By accepting a string parameter, the hook can reuse the same logic for different backend functionalities, reducing code duplication and enhancing maintainability.\r\n\r\nThis custom hook encapsulates API interaction logic, making it modular and easier to integrate into various components that need backend communication.\r\n\r\n```javascript\r\nconst useQAfetch = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchServer = async (string) => {\r\n    const url = '#########';\r\n    let str = string;\r\n    let responseCode;\r\n    let dataRespons;\r\n    let fillNan = [];\r\n    try {\r\n      let response;\r\n      if (str === 'Count null value') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Excel summary') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Extract value') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Chart') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Under costruction') {\r\n        dataRespons = {\r\n          res: 'Under costruction',\r\n          question: str,\r\n        };\r\n        console.log(dataRespons);\r\n        dispatch(excelAction.excelResponse(dataRespons));\r\n        return;\r\n      } else if (str === 'fill NAN W 0') {\r\n        response = await fetch(url + str);\r\n      } else {\r\n        response = await fetch(url + str);\r\n      }\r\n\r\n      responseCode = response.status;\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (str === 'Count null value') {\r\n        dataRespons = { res: data.value, question: str };\r\n      } else if (str === 'Excel summary') {\r\n        dataRespons = {\r\n          rows: data.rows,\r\n          columns: data.columns,\r\n          col_dtypes: data.col_dtypes,\r\n          max_value: data.max_value,\r\n          min_value: data.min_value,\r\n          question: str,\r\n        };\r\n      } else if (str === 'Extract value') {\r\n        dataRespons = {\r\n          value: data.value,\r\n          columns: data.columns,\r\n          row: data.row,\r\n          question: str,\r\n        };\r\n      } else if ('fill NAN W 0') {\r\n        dataRespons = data;\r\n        for (const key in dataRespons) {\r\n          fillNan.push({\r\n            id: dataRespons[key].column,\r\n            question: str,\r\n            column: dataRespons[key].column,\r\n            value: dataRespons[key].arr,\r\n          });\r\n        }\r\n      } else if (str === 'Chart') {\r\n        dataRespons = { res: data.value, question: str };\r\n      } else {\r\n        dataRespons = {\r\n          res: data.value,\r\n          question: str,\r\n        };\r\n      }\r\n\r\n      if (str === 'fill NAN W 0') {\r\n        dispatch(excelAction.excelResponse(fillNan));\r\n      } else {\r\n        dispatch(excelAction.excelResponse(dataRespons));\r\n      }\r\n    } catch (error) {\r\n      console.log(error, responseCode);\r\n      dataRespons = {\r\n        res: `We tryed to call the server but the server code is ${responseCode}`,\r\n        question: 'Error',\r\n      };\r\n      dispatch(excelAction.excelResponse(dataRespons));\r\n    }\r\n  };\r\n\r\n  return { fetchServer };\r\n};\r\n\r\nexport default useQAfetch;\r\n```\r\n\r\n## Chart Configuration and Visualization\r\n\r\nThe ChartSettings component is responsible for configuring a chart based on the selected columns from an Excel file, interacting with a backend API. Using useSelector, it extracts data from the application state, including existing responses and current chart configurations. The user can select columns for the X and Y axes, as well as the colors associated with them. These settings are then sent to the backend via a POST request in JSON format. If the request is successful, an image file (the generated chart) is returned, processed, and displayed to the user. The component also includes options to reset the current configuration and displays error messages if the data is invalid or the server request fails. All of these operations are handled using React, with state management via useState and useDispatch, and the interface dynamically updates as the user interacts with the data selection components.\r\n\r\n\r\n```javascript\r\nconst ChartSettings = () => {\r\n  const arr = useSelector((select) => select.exe.excelResponse);\r\n  const c = useSelector((state) => state.exe.chart);\r\n  const dispatch = useDispatch();\r\n  const [colXoane, setColXoane] = useState('');\r\n  const [colXtow, setColXtow] = useState('');\r\n  const [colY, setColY] = useState('');\r\n  const [full, setFull] = useState(false);\r\n  const [imageData, setImageData] = useState(null);\r\n  const [s, setS] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n\r\n  const [selectedColorXoane, setSelectedColorXoane] = useState('Blue');\r\n  const [selectedColorXtow, setSelectedColorXtow] = useState('Blue');\r\n\r\n  const handleColorChangeXoane = (event) => {\r\n    setSelectedColorXoane(event.target.value);\r\n  };\r\n  const handleColorChangeXtow = (event) => {\r\n    setSelectedColorXtow(event.target.value);\r\n  };\r\n\r\n  const setCol = (name) => {\r\n    if (colXoane === '') {\r\n      setColXoane(name);\r\n    } else if (colXtow === '') {\r\n      setColXtow(name);\r\n      setFull(true);\r\n    } else if (colXoane !== '' && colXtow !== '') {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const setY = (name) => {\r\n    setColY(name);\r\n  };\r\n\r\n  const json = {\r\n    columnX1: [colXoane, selectedColorXoane],\r\n    columnX2: [colXtow, selectedColorXtow],\r\n    Y: colY,\r\n  };\r\n\r\n  const createChart = async () => {\r\n    try {\r\n      const response = await fetch('#########', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(json),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Eroare la cerere');\r\n      }\r\n      const blob = await response.blob();\r\n      const imageUrl = URL.createObjectURL(blob);\r\n      setImageData(imageUrl);\r\n      dispatch(excelAction.chart(true));\r\n      setS(true);\r\n    } catch (error) {\r\n      console.error(`An error occurred: ${error.message}`);\r\n      setErr('This combination does not make sens');\r\n    }\r\n    console.log(json);\r\n  };\r\n  const restore = () => {\r\n    setColXoane('');\r\n    setColXtow('');\r\n    setColY('');\r\n    setFull(false);\r\n    setImageData(null);\r\n    setS(false);\r\n    setSelectedColorXoane('Blue');\r\n    setSelectedColorXtow('Blue');\r\n    dispatch(excelAction.chart(false));\r\n    setErr(false);\r\n  };\r\n\r\n  const relode = (\r\n    <button className={btn.btn} onClick={restore}>\r\n      relode\r\n    </button>\r\n  );\r\n\r\n  const colNames = arr.res.map((el) => (\r\n    <ChartBtn key={el} name={el} col={el} onClick={full ? setY : setCol} />\r\n  ));\r\n\r\n  const tablesChios = (\r\n    <>\r\n      <table className={style.tableConatiner}>\r\n        <thead>\r\n          <tr>\r\n            <th className={style.thead}>Axis X</th>\r\n            <th className={style.thead}>Color for X</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td\r\n              className={style.tableContent}\r\n              style={{ color: selectedColorXoane, fontWeight: 'bold' }}\r\n            >\r\n              {colXoane}\r\n            </td>\r\n\r\n            <td className={style.tableContent}>\r\n              <select\r\n                className={style.select}\r\n                value={selectedColorXoane}\r\n                onChange={handleColorChangeXoane}\r\n              >\r\n                <option className={style.option} value=\"Blue\">\r\n                  Blue\r\n                </option>\r\n                <option className={style.option} value=\"Red\">\r\n                  Red\r\n                </option>\r\n                <option className={style.option} value=\"Green\">\r\n                  Green\r\n                </option>\r\n                <option className={style.option} value=\"Yellow\">\r\n                  Yellow\r\n                </option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td\r\n              className={style.tableContent}\r\n              style={{ color: selectedColorXtow, fontWeight: 'bold' }}\r\n            >\r\n              {colXtow}\r\n            </td>\r\n\r\n            <td className={style.tableContent}>\r\n              <select\r\n                value={selectedColorXtow}\r\n                onChange={handleColorChangeXtow}\r\n              >\r\n                <option value=\"Blue\">Albastru</option>\r\n                <option value=\"Red\">Roșu</option>\r\n                <option value=\"Green\">Verde</option>\r\n                <option value=\"Yellow\">Galben</option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <table className={style.tableConatiner}>\r\n        <thead>\r\n          <tr>\r\n            <th className={style.thead}>Axis Y</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td className={style.tableContent} style={{ fontWeight: 'bold' }}>\r\n              {colY}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n\r\n  const img = (\r\n    <div className={style.imgChart}>\r\n      {imageData && (\r\n        <img className={style.img} src={imageData} alt=\"Descriere imagine\" />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const chart = (\r\n    <div className={style.create}>\r\n      <div className={style.chartContainerBtn}>\r\n        <svg\r\n          className={style.svgBtn}\r\n          version=\"1.1\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n          viewBox=\"0 0 32 32\"\r\n        >\r\n          <path d=\"M29 0h-26c-1.65 0-3 1.35-3 3v26c0 1.65 1.35 3 3 3h26c1.65 0 3-1.35 3-3v-26c0-1.65-1.35-3-3-3zM14 24c0 1.1-0.9 2-2 2h-4c-1.1 0-2-0.9-2-2v-16c0-1.1 0.9-2 2-2h4c1.1 0 2 0.9 2 2v16zM26 18c0 1.1-0.9 2-2 2h-4c-1.1 0-2-0.9-2-2v-10c0-1.1 0.9-2 2-2h4c1.1 0 2 0.9 2 2v10z\"></path>\r\n        </svg>\r\n        <button onClick={createChart} className={style.chartBtnStart}>\r\n          Create\r\n        </button>\r\n      </div>\r\n      {err && (\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n          <span style={{ color: 'red' }}>{err}</span>\r\n          {relode}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {!s && colNames}\r\n      {s && relode}\r\n      <div className={s ? style.imgContainer : style.chartContainer}>\r\n        {!s && tablesChios}\r\n        {s ? img : chart}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChartSettings;\r\n```\r\n\r\n\r\n## Conclusion:\r\n\r\nThe front-end implementation demonstrates a well-structured and interactive approach for handling data visualization. It allows users to dynamically select columns for chart creation, customize colors, and submit requests to the backend. The component handles responses efficiently, displaying the generated chart as an image. With a focus on flexibility, it supports multiple combinations of input data and ensures proper error handling to provide a smooth user experience. The inclusion of a reset functionality allows for easy restoration of settings. This front-end approach integrates effectively with the backend, ensuring the process from data selection to chart generation is seamless, intuitive, and user-friendly.\r\n"}],"serverPage":{"frontMatter":{"title":"Server administration"},"content":""},"server":[{"slug":"serverold","frontMatter":{"date":"02-05-2023","title":"Data","description":"Branding","image":"/images/project/06.jpg","color":"#BE0000","category":"Product","projectInfo":[{"title":"Client","data":"Data"},{"title":"Timeline","data":"2 Months"},{"title":"Services","data":"- Branding\n- Website design\n- Marketing and Planning\n"},{"title":"website","data":"https://aver.io"}]},"content":"\n## We couldn't be happier with the branding strategy developed.\n\nThroughout the process, Aver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\n\n\n## Challenge\n\nChoosing Aver as our branding agency was one of the best decisions we made. Their professionalism, creativity, and dedication made them a true partner in our brand journey. Aver's team took the time to understand our goals and values, crafting a comprehensive brand strategy that perfectly aligned with our vision. They translated this strategy into a visually captivating and impactful visual identity that truly represents our brand essence.\n\nAver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\n\nSuccess is overall the client expresses utmost satisfaction with the work done by Aver.\n\n<!-- <div class=\"image columns-1 sm:columns-2 gap-8\">\n\n![CocaCola 01.](/images/project/05-01.jpg)\n![CocaCola 02.](/images/project/05-02.jpg)\n</div> -->\n\n\n## Solution\n\nThe client expresses great satisfaction with their decision to choose Aver as their branding agency, describing it as one of the best decisions they made. Aver is commended for their professionalism, creativity, and dedication, which resulted in a strong partnership throughout the client's brand journey. Aver's team took the time to deeply understand the client's goals and values, leading to the development of a comprehensive brand strategy that aligned perfectly with the client's vision. This strategy was then translated into a visually captivating and impactful visual identity that truly represents the essence of the brand.\n\nThe client appreciates Aver's collaborative approach and open communication, highlighting the seamless experience they had while working together. The outstanding results achieved by Aver have successfully elevated the client's brand and positioned them for long-term success. Overall, the client expresses utmost satisfaction with the work done by Aver."}],"blogPage":{"frontMatter":{"title":"My weekly thoughts","subtitle":"Blog"},"content":""},"blogPosts":[{"slug":"Apache-on-Ubuntu-22.04-Using-Docker","frontMatter":{"title":"How to Install Apache on Ubuntu 22.04 Using Docker","description":"Apache is one of the most widely used web servers, providing a robust platform for hosting websites and web applications.","image":"/images/blog/09.jpg","date":"2023-05-23","category":"Server"},"content":"\n\n\nApache is one of the most widely used web servers, providing a robust platform for hosting websites and web applications. With the power of Docker, you can easily run Apache in an isolated container, making your setup portable and quick to deploy. In this blog post, we will walk you through the steps to install and run Apache on Ubuntu 22.04 using Docker. This setup is perfect for testing, development, or production environments.\n\n## What You'll Learn.\n\n\nIn this guide, you'll learn:\n\n1.  How to install Docker on Ubuntu 22.04.\n2.  How to pull and run Apache in a Docker container.\n3.  Basic management of your Apache Docker container.\n4.  How to troubleshoot any potential issues during the setup.\n\n## Step 1 Install Docker on Ubuntu 22.04\n\nBefore we begin setting up Apache, we need to ensure that Docker is installed on your system. Docker allows us to run Apache within a container, providing a lightweight and efficient environment. Follow these steps to get Docker up and running:\n\n1.1 Update Your System\n\nStart by updating your package lists to make sure you’re working with the latest versions of the software.\n\n```bash\nsudo apt update\nsudo apt upgrade -y\n```\n\n1.2 Install Required Dependencies\n\nNext, we’ll install some necessary dependencies to allow Docker to be added to the system.\n\n```bash\nsudo apt install -y apt-transport-https ca-certificates curl software-properties-common\n```\n\n1.3 Add Docker’s Official GPG Key\n\nNow, you need to add Docker’s official GPG key to your system so it can verify the Docker package authenticity.\n\n\n**curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg**\n\n1.4 Add Docker’s Repository\n\nAdd Docker’s official repository to your system’s list of sources, so you can install the latest version of Docker from it.\n\n\n**echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null**\n\n\n1.5 Install Docker\n\nNow you can install Docker. After updating your package list, install Docker using the following command:\n\n```bash\nsudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io\n```\n\n1.6 Verify Docker Installation\n\nTo confirm Docker was installed successfully, check the version of Docker installed:\n\n```bash\nsudo docker --version\n```\n## Step 2 Run Apache in a Docker Container\n\nNow that Docker is installed, it's time to pull the official Apache image and run it in a container. Docker makes it incredibly easy to run a fully functional Apache web server without the need to configure anything manually.\n\n2.1 Pull the Official Apache Image\n\nDocker Hub has a ready-to-use official Apache image, so you don't have to create one from scratch. Pull the image by running:\n\n```bash\nsudo docker pull httpd\n```\n2.2 Run Apache in a Docker Container\n\nWith the Apache image pulled, we can now run it in a container. This will start Apache and bind it to your machine's port 8080:\n\n```bash\nsudo docker run -d -p 8080:80 --name apache-server httpd\n```\n-d: Runs the container in detached mode (in the background).\n-p 8080:80: Maps port 80 inside the container (the default Apache port) to port 8080 on your host machine.\n--name apache-server: Names your container \"apache-server\" for easy reference.\n\n2.3 Verify the Apache Container is Running\n\nTo check if your container is running properly, you can use:\n```bash\nsudo docker ps\n```\nThis command will list all running containers, and you should see your apache-server container in the list.\n\n2.4 Access Apache in Your Browser\n\nNow, open your browser and navigate to http://localhost:8080 or http://<your-server-ip>:8080 (if you're working on a remote machine). You should see the default Apache welcome page, which indicates that Apache is running inside the Docker container.\n\n## Step 3 Managing Your Apache Docker Container\n\nOnce your Apache server is running, you may need to perform some basic container management tasks. Here are some useful commands:\n\n3.1 Stop the Apache Container\n\nIf you need to stop the Apache container, you can use the following command:\n\n```bash\nsudo docker stop apache-server\n```\n3.2 Start the Apache Container Again\n\nTo start the container again after stopping it:\n\n```bash\nsudo docker start apache-server\n```\n\n3.3 Remove the Apache Container\n\nIf you want to remove the container (for example, when cleaning up), use this command:\n\n```bash\nsudo docker rm apache-server\n```\n3.4 View Apache Logs\n\nTo view the logs generated by Apache inside the container:\n\n```bash\nsudo docker logs apache-server\n```\n\n## Step 4 Customize Your Apache Setup\n\nAt this point, you have Apache running in Docker with its default configuration. However, Docker allows for greater flexibility, enabling you to configure Apache further. You can mount configuration files or a custom website directory into your container, or even create a custom Dockerfile to suit your specific needs.\n\n4.1 Mounting Local Directories to Docker\n\nIf you want to serve your custom website, you can mount your local directory to the Apache container:\n```bash\nsudo docker run -d -p 8080:80 -v /path/to/your/website:/usr/local/apache2/htdocs/ --name apache-server httpd\n```\nThis command mounts the website directory on your host machine to the htdocs folder in the Apache container, where Apache looks for files to serve.\n\n## Troubleshooting Common Issues\n\nDocker Image Pull Failures: Ensure you have a stable internet connection. If you encounter issues while pulling the Apache image, try running docker system prune to clear unused data and try again.\nPort Conflicts: If port 8080 is already in use, you can change the host port (e.g., -p 8081:80) when running the container.\nApache Errors: To check for any issues with Apache itself, use docker logs apache-server to view the container's log output.\n\n## Conclusion\nCongratulations! You’ve successfully set up Apache on Ubuntu 22.04 using Docker. This method is a clean and efficient way to run a web server, with the added benefits of Docker’s portability and ease of use. You can now scale your Apache setup, customize it, or even deploy it in production with minimal effort. Docker makes managing your server environments a breeze, and using Apache in a containerized environment is a powerful choice for modern web hosting.\n\nIf you want to take it a step further, you can integrate Docker Compose to manage multi-container applications or even link Apache with a MySQL or PHP container for dynamic website hosting.\n\nHappy coding, and enjoy your new Apache web server!"}]},"__N_SSG":true}