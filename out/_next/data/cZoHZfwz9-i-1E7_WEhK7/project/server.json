{"pageProps":{"currentProject":{"slug":"server","frontMatter":{"date":"10-10-2011","title":"Database","description":"A server configurate to have multiple sql server","image":"/images/project/06.jpg","color":"#BE0000","category":"Server","projectInfo":[{"title":"Client","data":"Word Wide"},{"title":"Timeline","data":"In progress"},{"title":"Tehnology","data":"- UFW firewall\n- Ubuntu 20\n- Jenkins\n- Docker\n- MySQL\n- Oracle\n- Microsoft\n"},{"title":"Functions","data":"- Database creation\n- User creation\n- Establish a remote connections\n- Open Database for dev\n"}],"live":[{"link":"#"}]},"content":"\r\n## Description:\r\nThis project focuses on configuring a server to host multiple SQL databases efficiently. It utilizes advanced technologies such as Ubuntu 20, UFW firewall for security, Jenkins for continuous integration, Docker for containerization, and support for diverse database systems including MySQL, Oracle, and Microsoft SQL Server. The primary functions include creating databases, managing user accounts, establishing secure remote connections, and making the databases accessible for development purposes. The project is currently in progress and serves a global client base, ensuring robust and scalable database management solutions tailored to diverse needs.\r\n\r\n\r\n"},"nextProject":{"slug":"store","frontMatter":{"date":"10-10-2015","title":"Excel Store","lang":"Build with Python","description":"Backend with user creation and authentication, excel reading data and transfer in in JSON as response","image":"/images/project/05.jpg","color":"#BE0000","category":"Backend","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Release date","data":"07-06-2024"},{"title":"Tehnology","data":"- Python\n- Rest API\n- Panda\n"},{"title":"Functions","data":"- Excel to JSON \n- User account\n- Custome API\n- Chart creation \n"}],"live":[{"link":"https://excelstore.gabrielchiorcea.tech/"}]},"content":"\r\n## Arhitecture.\r\n\r\nThis application serves as a backend capable of processing and reading data from Excel files. To utilize this backend and connect it to a frontend, a user account is required. The account is essential as it provides a unique API key for authentication and authorization.\r\n\r\nExcel files are read using Pandas, which converts the file content into a DataFrame. Once transformed into a DataFrame, the data is further converted into JSON format based on the specific functions or filters requested. This enables dynamic and customizable data extraction from the Excel file.\r\n\r\nThe Excel file itself is stored in the database as a binary large object (BLOB), ensuring secure and efficient storage\r\n\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![Python 01.](/images/project/05-01.jpg)\r\n![Python 02.](/images/project/05-02.jpg)\r\n</div>\r\n\r\n\r\n## Get and store the excel file\r\n\r\nThe Excel file is uploaded via the /excel endpoint of the API. At this endpoint, the file undergoes validation to ensure it is an Excel file, even if the frontend does not perform this check. Once validated, the file is renamed for consistency and security.\r\n\r\nThe renaming process involves appending a unique ID, derived from the userâ€™s API key, to the file name. The resulting format is {ID}.xlsx. The renamed file is then securely stored in the database as a BLOB with its new identifier, ensuring traceability and efficient management.\r\n\r\n\r\n```python\r\n@app.route('/excel', methods=['POST'])\r\n@csrf.exempt\r\ndef upload_excel():\r\n    try:\r\n        # Check if a file is present in the request\r\n        if 'file' not in request.files:\r\n            return jsonify({'res': 'No file found in the request'}), 400\r\n        \r\n        file_in = request.files['file']\r\n        id = request.args.get('id')\r\n\r\n        # Validate the user ID parameter\r\n        if not id:\r\n            return jsonify({'res': 'Missing user ID'}), 400\r\n\r\n        # Check if the file name is empty\r\n        if file_in.filename == '':\r\n            return jsonify({'res': 'File name is empty'}), 400\r\n\r\n        # Validate the file extension (only .xlsx and .xls are allowed)\r\n        if not (file_in.filename.endswith('.xlsx') or file_in.filename.endswith('.xls')):\r\n            return jsonify({'res': 'Invalid file type, only Excel files are allowed (.xlsx, .xls)'}), 400\r\n\r\n        file_content = file_in.read()\r\n        \r\n        # Ensure the file is not empty\r\n        if not file_content:\r\n            return jsonify({'res': 'Uploaded file is empty'}), 400\r\n\r\n        # Generate a unique name for the file based on the user ID\r\n        file_name = f\"{id}.xlsx\"\r\n\r\n        # Create a new database record for the Excel file\r\n        new_excel_file = Excel(name=file_name, excel=file_content)\r\n\r\n        # Add the file to the database session and commit\r\n        db.session.add(new_excel_file)\r\n        db.session.commit()\r\n\r\n        return jsonify({'res': 'File uploaded successfully'}), 200\r\n\r\n    except Exception as e:\r\n        # Roll back the database transaction in case of an error\r\n        db.session.rollback()\r\n        print(f\"Error: {e}\")  # Log the error details to the console\r\n        return jsonify({'res': f'An error occurred while processing the file: {str(e)}'}), 500\r\n\r\n```\r\n\r\n## How the backend know what data to give you\r\n\r\nThe below API endpoint, accessible via /<string:para>/<string:ident> with a GET request, dynamically processes Excel files stored in a database. It retrieves the file based on an id query parameter, reads it into a Pandas DataFrame, and executes specific functions depending on the para value (e.g., counting null values, extracting data, summarizing content, filling missing values, or generating charts). The user's existence and identification (ident) are validated against the database, and if necessary, new identification records are created. By utilizing specialized classes (RespondGet and ResponseFill), the endpoint ensures modular and efficient data manipulation while maintaining robust error handling and database consistency.\r\n\r\n\r\n```python\r\n@app.route('/<string:para>/<string:ident>', methods=['GET'])\r\n@csrf.exempt\r\ndef get_with_ident(para, ident):\r\n    identificare = quote(ident)\r\n    id = request.args.get('id')\r\n    filename = str(id)+'.xlsx'\r\n    retrieved_excel_file = Excel.query.filter_by(name=filename).first()\r\n    excel_data = retrieved_excel_file.excel\r\n    excel_df = pd.read_excel(io.BytesIO(excel_data))\r\n    isntance_of_class = RespondGet(excel_df, id)\r\n    isntance_of_fill = ResponseFill(excel_df, id)\r\n    exist = User.query.filter_by(identification=identificare).first()\r\n    identt = Identification.query.filter_by(identification=identificare).first()\r\n\r\n    if(exist != None  and identt != None):\r\n            if para == \"CountNullValue\":\r\n                count = isntance_of_class.resp_get_null()\r\n                return count\r\n            elif para == \"ExtractValue\":\r\n                ex_val = isntance_of_class.resp_get_ex_val()\r\n                return ex_val\r\n            elif para == \"ExcelSummary\":\r\n                sumar = isntance_of_class.resp_get_ex_sumar()\r\n                return sumar\r\n            elif para == 'fillNANW0':\r\n                fill_na = isntance_of_fill.fill_na()\r\n                return fill_na\r\n            elif para == 'Chart':\r\n                chart = isntance_of_class.chart_columns()\r\n                return chart\r\n    elif(exist and identt == None):\r\n\r\n        time = datetime.now()\r\n        ident = Identification(timestamp=time, identification= identificare)\r\n        db.session.add(ident)\r\n        db.session.commit()\r\n        if para == \"CountNullValue\":\r\n            count = isntance_of_class.resp_get_null()\r\n            return count\r\n        elif para == \"ExtractValue\":\r\n            ex_val = isntance_of_class.resp_get_ex_val()\r\n            return ex_val\r\n        elif para == \"ExcelSummary\":\r\n            sumar = isntance_of_class.resp_get_ex_sumar()\r\n            return sumar\r\n        elif para == 'fillNANW0':\r\n            fill_na = isntance_of_fill.fill_na()\r\n            return fill_na\r\n        elif para == 'Chart':\r\n            chart = isntance_of_class.chart_columns()\r\n            return chart\r\n    else:\r\n        return jsonify({'val': exist}), 400\r\n```\r\n\r\n\r\n\r\n"}},"__N_SSG":true}