{"pageProps":{"currentProject":{"slug":"server","frontMatter":{"date":"01-02-2023","title":"Server","description":"Branding","image":"/images/project/06.jpg","color":"#038559","category":"Product","projectInfo":[{"title":"Server","data":"BocahKecil"},{"title":"Timeline","data":"3 Months"},{"title":"Services","data":"- Branding\n- Website design\n- Marketing and Planning\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n## We couldn't be happier with the branding strategy developed.\r\n\r\nThroughout the process, Aver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n\r\n<!-- <div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![The Taxi 01.](/images/project/06-01.jpg)\r\n![The Taxi 02.](/images/project/06-02.jpg)\r\n</div> -->\r\n\r\n## Challenge\r\n\r\nChoosing Aver as our branding agency was one of the best decisions we made. Their professionalism, creativity, and dedication made them a true partner in our brand journey. Aver's team took the time to understand our goals and values, crafting a comprehensive brand strategy that perfectly aligned with our vision. They translated this strategy into a visually captivating and impactful visual identity that truly represents our brand essence.\r\n\r\nAver's collaborative approach and open communication ensured a seamless experience. The outstanding results achieved have elevated our brand and positioned us for long-term success. We couldn't be happier with Aver's work.\r\n\r\n\r\n## Solution\r\n\r\nThe client expresses great satisfaction with their decision to choose Aver as their branding agency, describing it as one of the best decisions they made. Aver is commended for their professionalism, creativity, and dedication, which resulted in a strong partnership throughout the client's brand journey. Aver's team took the time to deeply understand the client's goals and values, leading to the development of a comprehensive brand strategy that aligned perfectly with the client's vision. This strategy was then translated into a visually captivating and impactful visual identity that truly represents the essence of the brand.\r\n\r\nThe client appreciates Aver's collaborative approach and open communication, highlighting the seamless experience they had while working together. The outstanding results achieved by Aver have successfully elevated the client's brand and positioned them for long-term success. Overall, the client expresses utmost satisfaction with the work done by Aver."},"nextProject":{"slug":"Quote","frontMatter":{"date":"06-05-2023","title":"Quote","description":"Facebook functions replica","image":"/images/project/01.jpg","color":"#67A94C","category":"WebApp","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Release date","data":"06-05-2023"},{"title":"Tehnology","data":"- React\n- SASS\n- FireBase\n- Redux\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post   \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n\r\n\r\n## Arhitecture. \r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nThis project is a standalone frontend application built with React, focusing on delivering a streamlined user experience. It does not have a dedicated backend; instead, it relies on Firebase as a Backend-as-a-Service (BaaS) for data storage and real-time functionality. Designed with a mobile-first approach, the application prioritizes optimization for mobile devices, providing core features inspired by Facebook, such as sharing posts and liking them.\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n\r\n![Southpole 02.](/images/project/01.jpg)\r\n![Southpole 04.](/images/project/01-01.jpg)\r\n\r\n</div>\r\n\r\nFor data storage, the application uses a NoSQL Firebase database. User data, such as account creation information, is temporarily stored in the local session (e.g., localStorage or sessionStorage) and then sent to Firebase for permanent storage. Posts and other content-related data are retrieved from Firebase through API calls, often referred to as \"gates.\" These are then integrated into the app's state, which is managed using Redux, ensuring a consistent and efficient flow of information between components.\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nThe application incorporates modern technologies to achieve its functionality. While React serves as the framework for building the user interface, Sass is used for styling, offering modular and reusable designs. Redux is at the core of the app’s state management, enabling smooth synchronization of data such as posts, likes, and shares. Middleware like Redux Thunk facilitates handling asynchronous API calls to Firebase, ensuring organized and efficient state updates.\r\n\r\nThe user interactions within the app are intuitive and align with familiar patterns from social media platforms. For instance, users can share posts or like them, with these actions updating both the local state and Firebase in real-time. Account creation is straightforward, with user details initially stored locally before being validated and saved in Firebase. Posts and related interactions, once fetched, are synchronized with the Redux Store, making them readily accessible across various parts of the application.\r\n\r\n\r\n## Redux Role in the Application \r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nRedux manages the global state of the application, ensuring synchronization between Firebase and the user interface. Upon initialization, all posts are fetched from Firebase and stored in posts, an array that holds all existing posts.\r\n\r\nThe Redux state structure also includes oldPosts for older posts and newpost for newly created ones. When a user adds a new post, it's first stored in newpost, then added to both posts and jokes to keep the UI up-to-date. This allows real-time updates and ensures smooth content management across the application.\r\n\r\n```javascript\r\n name: 'post',\r\n  initialState: {\r\n    posts: [],\r\n    newPost: [],\r\n    topTen: [],\r\n    oldPost: [],\r\n    wellcomeState: 'empty',\r\n    writtenPost: false,\r\n    existUser: false,\r\n    cookieConsent: false,\r\n    deleteAccount: false,\r\n    error: {\r\n      errorMainArr: false,\r\n      errorMajorArr: false,\r\n      formError: false,\r\n      registration: false,\r\n    },\r\n```\r\n\r\n\r\n## Custom Hook for Post Updates (Like/Dislike)\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nIn this application, posts are categorized into two types: those containing obscene words and those that are normal. The like/dislike functionality relies on three key parameters: id, type, and url. The id uniquely identifies a post, type specifies whether it's a like or a dislike, and url determines which division the post belongs to (either containing obscene content or not). This url corresponds to different sections in the database, as the posts are stored separately to simplify analysis of the content.\r\n\r\nTo implement this functionality, a custom hook is designed to handle post updates based on user interaction. The process can be broken down as follows:\r\n\r\n\r\n1. Item 1 URL Fetching from env: Based on the provided url (indicating the division), the custom hook retrieves the corresponding URL stored in the environment file (.env). This URL points to the specific division of posts, allowing for clear separation of content that contains obscene words from normal content.\r\n\r\n2. Item 2 Like/Dislike Action: Once the hook receives the type (either \"like\" or \"dislike\"), it triggers an API call to the appropriate division (using the URL retrieved from env). The post’s unique id is used to fetch the relevant post data for processing.\r\n\r\n3. Item 3 Post Comparison and State Update: After fetching the post, the custom hook compares it to the corresponding entry in the oldPosts array (which holds previously fetched post data). If the post has changed—such as when the like/dislike count has been updated—the hook will update the Redux state with the new data. If the post differs from its previous state, it will be added to the posts array in Redux for UI reactivity.\r\n\r\n4. Item 4 Database Synchronization: Once the UI state is updated with the new like/dislike data, the hook ensures the changes are reflected in the Firebase database by sending an update request, ensuring consistency between the frontend and the backend.\r\n\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\n```javascript\r\nimport { postActions } from '../store/post-slice';\r\nimport { useDispatch } from 'react-redux';\r\nconst useUpdate = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const mapPutVote = async (id, type, url) => {\r\n    const sendId = id;\r\n    const URL = url;\r\n\r\n    let response;\r\n    let comeFrom;\r\n    if (URL === process.env.REACT_APP_URL_POST) {\r\n      comeFrom = 'AllPosts';\r\n      response = await fetch(\r\n        process.env.REACT_APP_PrefixNormalDB + sendId + '.json'\r\n      );\r\n    } else {\r\n      comeFrom = 'MajorPosts';\r\n      response = await fetch(\r\n        process.env.REACT_APP_PrefixMajorDB + sendId + '.json'\r\n      );\r\n    }\r\n    const data = await response.json();\r\n    let notIncremented = data.vote;\r\n    \r\n    let isIncrmented;\r\n\r\n    if (type === 'increment') {\r\n      isIncrmented = ++notIncremented;\r\n    } else if (type === 'decrease' && notIncremented <= 0) {\r\n      isIncrmented = notIncremented;\r\n    } else {\r\n      isIncrmented = --notIncremented;\r\n    }\r\n\r\n    const sendVote = { vote: isIncrmented };\r\n    const newVote = sendVote.vote;\r\n    const sendPayload = {\r\n      comeFrom: comeFrom,\r\n      id: sendId,\r\n      vote: sendVote.vote,\r\n    };\r\n\r\n    let switchedUrl;\r\n\r\n    if (URL === process.env.REACT_APP_URL_BANC) {\r\n      switchedUrl = process.env.REACT_APP_PrefixNormalDB + sendId + '.json';\r\n    } else if (URL === process.env.REACT_APP_URL_MAJOR) {\r\n      switchedUrl = process.env.REACT_APP_PrefixMajorDB + sendId + '.json';\r\n    }\r\n    if (notIncremented > 0) {\r\n      setTimeout(() => {\r\n        fetch(switchedUrl, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify({ vote: newVote }),\r\n        });\r\n      }, 700);\r\n    }\r\n\r\n    dispatch(postActions.upDateOldPosts(sendPayload));\r\n\r\n  };\r\n  return { mapPutVote };\r\n};\r\n\r\nexport default useUpdate;\r\n\r\n```\r\n\r\n\r\n## More\r\n\r\n<div class=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![Southpole 03.](/images/project/01-02.jpg)\r\n![Southpole 03.](/images/project/01-03.jpg)\r\n<!-- ![Southpole 03.](/images/project/01-03.jpg)\r\n![Southpole 04.](/images/project/01-04.jpg) -->\r\n</div>\r\n\r\n\r\n"}},"__N_SSG":true}