{"pageProps":{"projectPage":{"frontMatter":{"title":"Recent Works"},"content":""},"allProjects":[{"slug":"react-food-order-app","frontMatter":{"date":"2024-10-10","title":"Meals","lang":"Build with React","description":"This app use the core functionalities of a food ordering application, including menu navigation, cart management, order placement, and administrative controls. It provides a fully functional and attractive interface for users to interact with.","image":"/images/project/07.jpg","color":"#67A94C","category":"Frontend","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Release date","data":"Steel in development, but ready for tests"},{"title":"Tehnology","data":"- React\n- SASS\n- FireBase\n- Redux\n- Router\n- Material-UI\n"},{"title":"Functions","data":"- Authentication and Authorization\n- Data Fetching and API Integration\n- Oder state managemnet\n- Admin/User UI \n"}],"live":[{"link":"https://meals.gabrielchiorcea.tech/"}]},"content":"\n\n\n## Arhitecture. \n\n\n<div className=\"image columns-1 sm:columns-2 gap-8\">\n\n\n![React 02.](/images/project/07.jpg)\n![React 04.](/images/project/07-01.jpg)\n\n</div>\n\n\n\n\n## Description\n\nReact Meals is a web-based food ordering application developed using React and Firebase. This application allows users to browse a menu of available meals, add items to their cart, and place orders. It also includes administrative features for managing product availability.\n\n### Key Features\n1. Menu Navigation and Viewing:\n- Users can view a list of available meals, each with a description, price, and availability status.\n\n2. Add to Cart:\n- Users can add meals to their shopping cart by specifying the desired quantity.\n- The shopping cart is updated in real-time and can be viewed through a dedicated button.\n\n3. Place Orders:\n- Users can place orders by filling out a form with personal and delivery details.\n- Orders are saved in Firebase Realtime Database for further management.\n\n### Administrative Features:\n\nAdmins can manage products, updating their availability directly from the application interface. Administrative features are protected and accessible only to authorized users.\n\n<div className=\"image columns-1 sm:columns-2 gap-8\">\n\n![React 03.](/images/project/07-02.jpg)\n![React 03.](/images/project/07-03.jpg)\n![React 03.](/images/project/07-04.jpg)\n\n</div>\n\n## Technologies Used\n1. React: The main library used for building the user interface.\n2. Redux: State management to ensure a smooth and consistent user experience.\n3. Firebase: Used for authentication and real-time data storage.\n4. React Router: Manages routing and navigation within the application.\n5. Styled Components: Styles React components to create a modern and attractive interface.\n6. Material-UI: A UI component library to accelerate development and ensure design consistency.\n\n## Project Structure\nComponents: Contains all reusable components of the application, such as buttons, forms, and lists.\nPages: Contains the main pages of the application, such as the menu page, cart page, and admin page.\nStore: Contains the Redux configuration and reducers for managing the application's state.\nFirebase: Configuration for Firebase authentication and data storage.\n\n## Redux :\n\n\n```javascript\n\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialCartState = {\n  items: [],\n  meals: [],\n  totalAmount: 0,\n  isAdmin: false,\n  stockButton: false,\n  productButton: false,\n  orderButton: true\n\n};\n\nconst orderSlice = createSlice({\n  name: 'order',\n  initialState: initialCartState,\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalAmount += newItem.price * newItem.amount;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          name: newItem.name,\n          amount: newItem.amount,\n          price: newItem.price,\n        });\n      } else {\n        existingItem.amount += newItem.amount;\n      }\n    },\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalAmount -= existingItem.price;\n      if (existingItem.amount === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.amount--;\n      }\n    },\n    addMeal(state, action) {\n      const newMeal = action.payload;\n      const existingMeal = state.meals.find(meal => meal.id === newMeal.id);\n      if (!existingMeal) {\n        state.meals.push({\n          id: newMeal.id,\n          name: newMeal.name,\n          description: newMeal.description,\n          price: newMeal.price,\n          availability: newMeal.availability,\n        });\n      }\n    },\n    clearCart(state) {\n      state.items = [];\n      state.totalAmount = 0;\n    },\n    loginAdmin(state, action) {\n      state.isAdmin = action.payload;\n    },\n\n    setStockButton(state, action) {\n      state.stockButton = action.payload;\n    },\n\n    setProductButton(state, action) {\n      state.productButton = action.payload;\n    },\n\n    setOrderButton(state, action) {\n      state.orderButton = action.payload;\n    }\n  },\n});\n\nexport const orderActions = orderSlice.actions;\nexport default orderSlice.reducer;\n\n```\n\n1. The order-slice.js file defines the initial state and the reducers for managing the cart state.\n2. The createSlice function from Redux Toolkit is used to create a slice of the state, which includes actions and reducers.\n3. The initial state includes properties like items, meals, totalAmount, isAdmin, stockButton, productButton, and orderButton.\n4. The reducers define how the state should be updated in response to actions. For example, the addItem reducer adds a new item to the cart, and the removeItem reducer removes an item from the cart.\n\n## Configuring the Redux Store:\n\nThe index.js file in the store directory configures the Redux store using the configureStore function from Redux Toolkit. The store is configured with the orderReducer created in the order-slice.js file.\n\nProviding the Redux Store to the Application:\nThe index.js file in the root directory wraps the App component with the Provider component from react-redux and passes the store to it.\nThis makes the Redux store available to all components in the application.\n\nBy using Redux for state management, the React Meals application ensures a predictable and efficient way to manage the application state. Redux helps in maintaining a single source of truth for the state, making it easier to debug and test the application. The use of Redux Toolkit simplifies the setup and reduces boilerplate code, allowing for a more streamlined development process.\n\n\n\n\n"},{"slug":"checker","frontMatter":{"date":"2023-11-11","title":"Checker","lang":"Build with C#","description":"This project is an interactive web application developed with Blazor WebAssembly, utilizing Fluxor for state management and including custom services for authentication and handling HTTP requests.","image":"/images/project/03.jpg","color":"#BF4106","category":"Frontend","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Timeline","data":"In progress, but ready for tests"},{"title":"Tehnology","data":"- Blazor\n- Fluxor \n- Bootstrap  \n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post \n"}],"live":[{"link":"https://checker.gabrielchiorcea.tech/"}]},"content":"\r\n\r\n<div className=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n\r\n![C# 02.](/images/project/03-02.jpg)\r\n![C# 01.](/images/project/03-01.jpg)\r\n![C# 03.](/images/project/03-03.jpg)\r\n![C# 03.](/images/project/03-04.jpg)\r\n\r\n\r\n</div>\r\n\r\n\r\n## Project Overview\r\n\r\nChecker is a web application designed to manage user profiles and account settings. It provides functionalities for viewing and updating profile information, changing passwords, and deleting accounts. The application aims to offer a seamless user experience with a responsive design.\r\n\r\n\r\n\r\n## Program.cs Description\r\n\r\nThe Program.cs file is the entry point for a Blazor WebAssembly application. It configures the root components, sets up services, configures Fluxor for state management, and sets the logging configuration. Finally, it builds and runs the application asynchronously. This file ensures that the application is properly initialized and configured before it starts running.\r\n\r\nKey Components:\r\n1. Root Components\r\n2. Service Configuration\r\n3. Fluxor Configuration\r\n4. Logging Configuration\r\n5. Application Initialization\r\n6. Description of Visible Code\r\n7. Root Components\r\n\r\nThe root components of the Blazor application are added to the component tree. These components are the entry points for the application and are rendered in the specified HTML elements.\r\n\r\n```C\r\nbuilder.RootComponents.Add<App>(\"#app\");\r\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\r\n```\r\n* App: The main application component, rendered in the HTML element with the ID app.\r\n\r\n* HeadOutlet: A component for rendering content in the HTML <head> element, rendered after the existing content.\r\n\r\n\r\nService Configuration\r\nServices are configured and added to the dependency injection container. These services can be injected into components and other services throughout the application.\r\n\r\n```C#\r\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\r\nbuilder.Services.AddScoped<FetchService>();\r\nbuilder.Services.AddScoped<AuthenticationTocken>();\r\n```\r\n\r\n* HttpClient: Configured with the base address of the host environment.\r\n* FetchService: A custom service for handling HTTP requests.\r\n* AuthenticationTocken: A custom service for managing authentication tokens.\r\n\r\n\r\nFluxor Configuration\r\nFluxor, a state management library for Blazor, is configured and added to the services.\r\n```C#\r\nbuilder.Services.AddFluxor(o =>\r\n{\r\n    o.ScanAssemblies(typeof(Program).Assembly);\r\n    o.UseReduxDevTools();\r\n});\r\n```\r\n\r\n* ScanAssemblies: Scans the specified assembly for Fluxor-related classes (e.g., actions, reducers, effects).\r\n* UseReduxDevTools: Enables Redux DevTools integration for state debugging.\r\n\r\n\r\nLogging Configuration\r\nThe logging configuration is set to a minimum level of Information.\r\n```C#\r\nbuilder.Logging.SetMinimumLevel(LogLevel.Information);\r\n```\r\nApplication Initialization\r\nThe application is built and run asynchronously.\r\n\r\n```C#\r\nawait builder.Build().RunAsync();\r\n```\r\n\r\n\r\n## Pages\r\n\r\nThe Signup.razor file is a Blazor component that handles the user sign-up process. This component includes a form where users can enter their email, username, and password to create a new account. The component also manages the state of the form, including validation and error handling.\r\n\r\nKey Components:\r\n1. Form Fields: The form includes input fields for the user's email, username, and password.\r\nState Management: The component manages the state of the form fields, including validation states and error messages.\r\n2. Event Handling: The component includes methods to handle form submission and validation.\r\n\r\n3. UI Feedback: The component provides visual feedback to the user based on the validation state of the form fields.\r\n\r\nDescription of Visible Code\r\n1. Message Handling: The code sets a message to \"false\" and updates the styleClassUsername to indicate a valid username. It also sets the userName flag to true.\r\n2. Exception Handling: The code includes a try-catch block to handle exceptions during the verification process, logging any errors to the console.\r\n3. State Management: The stateManager method updates the state of the form, resetting the style classes for the email and username input fields to their default state.\r\n\r\nThe Signup.razor component is responsible for handling the user sign-up process in a Blazor application. It includes form fields for user input, manages the state of these fields, handles form submission and validation, and provides visual feedback to the user. The visible code snippet shows how the component updates the state and handles exceptions during the verification process.\r\n\r\nProfileRender.razor Description\r\nThe ProfileRender.razor component is responsible for rendering the user's profile information in a Blazor application. This component typically includes the following functionalities:\r\n\r\n1. Profile Data Fetching: The component fetches the user's profile data from a service or state management store when the component is initialized.\r\n2. Profile Display: The component displays the user's profile information, such as name, email, and other relevant details, in a structured format.\r\n3. Profile Update: The component may include functionality to update the user's profile information, allowing users to edit and save changes to their profile.\r\n4. DOM Manipulation: The ProfileDom method is likely used to manipulate or render the profile DOM structure, ensuring that the profile information is displayed correctly and dynamically updated based on user interactions or other events.\r\n\r\nKey Components\r\n1. Profile Data Fetching: The component fetches the user's profile data, using FetchService.\r\n2. Profile Display: The component displays the profile information in a user-friendly format, such as a form or a set of labeled fields.\r\n3. Profile Update: The component may provide input fields and buttons to allow users to update their profile information.\r\n4. DOM Manipulation: The ProfileDom method is used to handle any necessary DOM manipulations to ensure the profile information is displayed and updated correctly.\r\n\r\nThe ProfileRender.razor component is a crucial part of the user interface in a Blazor application, responsible for displaying and managing the user's profile information. It fetches the profile data, displays it in a structured format, and may provide functionality for users to update their profile information. The ProfileDom method is used to handle any necessary DOM manipulations, ensuring that the profile information is displayed and updated correctly based on user interactions or other events.\r\n\r\n\r\n## HTTP\r\n\r\nThe http request are defines by  FetchService class in the Checker.Services namespace. The class is designed to handle HTTP requests and interactions with JavaScript runtime in a Blazor WebAssembly application.\r\n\r\nHere are the key components:\r\n\r\nNamespaces: The code imports several namespaces required for HTTP operations, JSON handling, state management, and JavaScript interop.\r\n\r\n1. System.Net\r\n2. System.Net.Http.Headers\r\n3. System.Net.Http.Json\r\n4. Checker.Models\r\n5. Checker.state\r\n6. Fluxor\r\n7. Microsoft.JSInterop\r\nNamespace Declaration: The FetchService class is declared within the Checker.Services namespace.\r\n\r\nClass Declaration: The FetchService class is declared as a public class.\r\n\r\nPrivate Fields:\r\n\r\n_httpClinet: A private readonly field of type HttpClient for making HTTP requests.\r\n\r\n_jsRuntime: A private readonly field of type IJSRuntime for interacting with JavaScript. \r\n\r\nConstructor: The constructor initializes the _httpClinet and _jsRuntime fields with the provided HttpClient and IJSRuntime instances.\r\n\r\n## Method\r\n\r\n### LoginAsync\r\n\r\nThis method handles user login by sending a POST request with the login model and returns a token.\r\n\r\n```C#\r\npublic async Task<JsonModel> LoginAsync(LoginModel loginModel)\r\n{\r\n    var response = await _httpClinet.PostAsJsonAsync($\"{AppSettings.ApiBaseUrl}/creare-cont\", loginModel);\r\n    response.EnsureSuccessStatusCode();\r\n    var token = await response.Content.ReadFromJsonAsync<JsonModel>();\r\n    return token;\r\n}\r\n```\r\n### SignUpAsync\r\nThis method handles user sign-up by sending a POST request with the sign-up model and returns a response model.\r\n\r\n```C#\r\npublic async Task<SignUpResponseModel> SignUpAsync(SignUpModel signUpModel)\r\n{\r\n    var response = await _httpClinet.PostAsJsonAsync($\"{AppSettings.ApiBaseUrl}/inregistrare\", signUpModel);\r\n    response.EnsureSuccessStatusCode();\r\n    var result = await response.Content.ReadFromJsonAsync<SignUpResponseModel>();\r\n    return result;\r\n}\r\n```\r\n\r\n## Additional Methods like\r\n\r\n### GetUserProfileAsync\r\n\r\nThis method retrieves the user's profile by sending a GET request.\r\n```C#\r\npublic async Task<UserProfileModel> GetUserProfileAsync(string token)\r\n{\r\n    var request = new HttpRequestMessage(HttpMethod.Get, $\"{AppSettings.ApiBaseUrl}/profil\");\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\r\n    var response = await _httpClinet.SendAsync(request);\r\n    response.EnsureSuccessStatusCode();\r\n    return await response.Content.ReadFromJsonAsync<UserProfileModel>();\r\n}\r\n```\r\n\r\n### UpdateUserProfileAsync\r\n\r\nThis method updates the user's profile by sending a PUT request with the updated profile model.\r\n\r\n```C#\r\npublic async Task<HttpResponseMessage> UpdateUserProfileAsync(UserProfileModel profileModel, string token)\r\n{\r\n    var request = new HttpRequestMessage(HttpMethod.Put, $\"{AppSettings.ApiBaseUrl}/profil\");\r\n    request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\r\n    request.Content = JsonContent.Create(profileModel);\r\n    return await _httpClinet.SendAsync(request);\r\n}\r\n```\r\nThe FetchService class provides a comprehensive set of methods for handling user authentication and profile management. These methods include logging in, signing up, retrieving user profiles, updating profiles, and logging out. Each method is designed to perform specific tasks by making appropriate HTTP requests or interacting with JavaScript, ensuring a clean and reusable service layer within the Blazor WebAssembly application.\r\n\r\n\r\n## State management\r\n\r\nThe state management in this code is implemented using the Fluxor library, which is a state management library for Blazor applications. The code defines reducers that handle specific actions to update the application's state.\r\n\r\n\r\nLet's focus on the ProfileCardState and how is used in the context of state management with Fluxor.\r\n\r\n### ProfileCardState\r\nThe ProfileCardState likely represents the state of a user's profile card in the application. This state could include information such as the user's profile details, loading status, and any errors.\r\n\r\nDescription\r\nProfileCardState Definition:\r\n\r\nThe ProfileCardState class is defined in the State.cs file. It includes properties like HomeAddress, Country, County, Occupation, FullName, Email, Image, and various social media links.\r\n```C#\r\npublic class ProfileCardState\r\n{\r\n    public string HomeAddress { get; set; }\r\n    public string Country { get; set; }\r\n    public string County { get; set; }\r\n    public string Occupation { get; set; }\r\n    public string FullName { get; set; }\r\n    public string Email { get; set; }\r\n    public byte[] Image { get; set; }\r\n    public string LinkedIn { get; set; }\r\n    public string FaceBook { get; set; }\r\n    public string GitHub { get; set; }\r\n    public string Instagram { get; set; }\r\n    public string Twitter { get; set; }\r\n    public string Youtube { get; set; }\r\n    public string Description { get; set; }\r\n\r\n    public ProfileCardState(string homeAddress, string country, string county, string occupation, string fullname, string email, byte[] image, string linkedIn, string faceBook, string gitHub, string instagram, string twitter, string youtube, string description)\r\n    {\r\n        HomeAddress = homeAddress;\r\n        Country = country;\r\n        County = county;\r\n        Occupation = occupation;\r\n        Image = image;\r\n        FullName = fullname;\r\n        Email = email;\r\n        LinkedIn = linkedIn;\r\n        FaceBook = faceBook;\r\n        GitHub = gitHub;\r\n        Instagram = instagram;\r\n        Twitter = twitter;\r\n        Youtube = youtube;\r\n        Description = description;\r\n    }\r\n\r\n    public ProfileCardState() { }\r\n}\r\n```\r\n\r\n\r\nIt has constructors to initialize these properties, including a parameterless constructor for flexibility.\r\n\r\n\r\nFeature Initialization:\r\n\r\nThe ProfileCardFeature class, defined in the Feature.cs file, specifies the initial state of ProfileCardState with default values.\r\n\r\n```C#\r\nusing Fluxor;\r\n\r\nnamespace Checker.state\r\n{\r\n    public class ProfileCardFeature : Feature<ProfileCardState>\r\n    {\r\n        public override string GetName() => \"ProfileCard\";\r\n\r\n        protected override ProfileCardState GetInitialState() =>\r\n            new ProfileCardState(\r\n                string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, new byte[0], \r\n                string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, string.Empty, \r\n                string.Empty\r\n            );\r\n    }\r\n}\r\n```\r\n\r\nReducers:\r\n\r\nThe ProfileCardReducer class, found in the Reducers.cs file, handles state changes. The ReduceProfileCard method updates the state based on the GetProfileCardState action by creating a new ProfileCardState with updated values.\r\n```C#\r\nusing Fluxor;\r\n\r\nnamespace Checker.state\r\n{\r\n    public static class ProfileCardReducer\r\n    {\r\n        [ReducerMethod]\r\n        public static ProfileCardState ReduceProfileCard(ProfileCardState state, GetProfileCardState action)\r\n        {\r\n            return new ProfileCardState(\r\n                action.State.HomeAddress,\r\n                action.State.Country,\r\n                action.State.County,\r\n                action.State.Occupation,\r\n                action.State.FullName,\r\n                action.State.Email,            \r\n                action.State.Image,\r\n                action.State.LinkedIn,\r\n                action.State.FaceBook,\r\n                action.State.GitHub,\r\n                action.State.Instagram,\r\n                action.State.Twitter,\r\n                action.State.Youtube,\r\n                action.State.Description\r\n            );\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\nUsage in Components:\r\n\r\nIn various Razor components like ProfileRender.razor, HomeRender.razor, and AdminRender.razor, the ProfileCardState is injected and used to display profile information.\r\nThese components fetch user data from the server and dispatch actions to update the state. For example, when the profile page is loaded, it checks the authentication token and fetches the user's profile data to update the state.\r\n\r\n```C#\r\n@page \"/profile\"\r\n\r\n@using Checker.Pages.Message\r\n@using global::Checker.state\r\n@using global::Checker.Models \r\n@using global::Checker.Services\r\n@using global::Checker.features\r\n@using Fluxor\r\n@inject AuthenticationTocken authenticationtocken\r\n@inject IState<ProfileCardState> ProfileCardState\r\n\r\n@inject FetchService fetchService\r\n@inject IDispatcher Dispatcher\r\n\r\n@if(error == false){\r\n    @if(isLoading){\r\n        <BlazorChecking/>\r\n    } else if(tokenState){\r\n        <ProfileDom/>\r\n    }else{\r\n        <Restricted/>\r\n    }\r\n}else{\r\n    <BlazorError/>\r\n}\r\n\r\n@code{\r\n    bool isLoading = true;\r\n    bool error = false;\r\n    bool tokenState;\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        tokenState = await authenticationtocken.Check();\r\n        \r\n        if(!string.IsNullOrEmpty(ProfileCardState.Value.FullName)){\r\n            isLoading = false;\r\n            return;\r\n        }\r\n\r\n        string tokenString = await authenticationtocken.GetTocken();\r\n        if(tokenState){\r\n            try{\r\n                var response = await fetchService.GetResponsSocialCard($\"{AppSettings.ApiBaseUrl}/get\", tokenString);\r\n                Dispatcher.Dispatch(new GetProfileCardState(response));\r\n                if(response != null){\r\n                    isLoading = false;\r\n                }else{\r\n                    throw new Exception(\"eroare\");\r\n                }\r\n            } catch (Exception) {\r\n                error = true;\r\n                return;\r\n            }\r\n        }else{\r\n            isLoading = false;\r\n        }\r\n    }\r\n}\r\n```\r\nThis setup ensures consistent management and updating of the profile information across the application using Fluxor.\r\n\r\n\r\n\r\n\r\n"},{"slug":"quote","frontMatter":{"date":"2017-10-10","title":"Quote","lang":"Build with React","description":"React frontend app using Firebase for backend and Sass for styling. Redux manages state","image":"/images/project/01.jpg","color":"#67A94C","category":"Frontend","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Release date","data":"06-05-2023"},{"title":"Tehnology","data":"- React\n- SASS\n- FireBase\n- Redux\n"},{"title":"Functions","data":"- Post Like\n- User Account\n- Activity track\n- Share post   \n"}],"live":[{"link":"https://quote.gabrielchiorcea.tech/"}]},"content":"\r\n\r\n\r\n## Arhitecture. \r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nThis project is a standalone frontend application built with React, focusing on delivering a streamlined user experience. It does not have a dedicated backend; instead, it relies on Firebase as a Backend-as-a-Service (BaaS) for data storage and real-time functionality. Designed with a mobile-first approach, the application prioritizes optimization for mobile devices, providing core features inspired by Facebook, such as sharing posts and liking them.\r\n\r\n<div className=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n\r\n![React 02.](/images/project/01.jpg)\r\n![React 04.](/images/project/01-01.jpg)\r\n\r\n</div>\r\n\r\nFor data storage, the application uses a NoSQL Firebase database. User data, such as account creation information, is temporarily stored in the local session (e.g., localStorage or sessionStorage) and then sent to Firebase for permanent storage. Posts and other content-related data are retrieved from Firebase through API calls, often referred to as \"gates.\" These are then integrated into the app's state, which is managed using Redux, ensuring a consistent and efficient flow of information between components.\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nThe application incorporates modern technologies to achieve its functionality. While React serves as the framework for building the user interface, Sass is used for styling, offering modular and reusable designs. Redux is at the core of the app’s state management, enabling smooth synchronization of data such as posts, likes, and shares. Middleware like Redux Thunk facilitates handling asynchronous API calls to Firebase, ensuring organized and efficient state updates.\r\n\r\nThe user interactions within the app are intuitive and align with familiar patterns from social media platforms. For instance, users can share posts or like them, with these actions updating both the local state and Firebase in real-time. Account creation is straightforward, with user details initially stored locally before being validated and saved in Firebase. Posts and related interactions, once fetched, are synchronized with the Redux Store, making them readily accessible across various parts of the application.\r\n\r\n\r\n## Redux Role in the Application \r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nRedux manages the global state of the application, ensuring synchronization between Firebase and the user interface. Upon initialization, all posts are fetched from Firebase and stored in posts, an array that holds all existing posts.\r\n\r\nThe Redux state structure also includes oldPosts for older posts and newpost for newly created ones. When a user adds a new post, it's first stored in newpost, then added to both posts and jokes to keep the UI up-to-date. This allows real-time updates and ensures smooth content management across the application.\r\n\r\n```javascript\r\n name: 'post',\r\n  initialState: {\r\n    posts: [],\r\n    newPost: [],\r\n    topTen: [],\r\n    oldPost: [],\r\n    wellcomeState: 'empty',\r\n    writtenPost: false,\r\n    existUser: false,\r\n    cookieConsent: false,\r\n    deleteAccount: false,\r\n    error: {\r\n      errorMainArr: false,\r\n      errorMajorArr: false,\r\n      formError: false,\r\n      registration: false,\r\n    },\r\n```\r\n\r\n\r\n## Custom Hook for Post Updates (Like/Dislike)\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\nIn this application, posts are categorized into two types: those containing obscene words and those that are normal. The like/dislike functionality relies on three key parameters: id, type, and url. The id uniquely identifies a post, type specifies whether it's a like or a dislike, and url determines which division the post belongs to (either containing obscene content or not). This url corresponds to different sections in the database, as the posts are stored separately to simplify analysis of the content.\r\n\r\nTo implement this functionality, a custom hook is designed to handle post updates based on user interaction. The process can be broken down as follows:\r\n\r\n\r\n1. Item 1 URL Fetching from env: Based on the provided url (indicating the division), the custom hook retrieves the corresponding URL stored in the environment file (.env). This URL points to the specific division of posts, allowing for clear separation of content that contains obscene words from normal content.\r\n\r\n2. Item 2 Like/Dislike Action: Once the hook receives the type (either \"like\" or \"dislike\"), it triggers an API call to the appropriate division (using the URL retrieved from env). The post’s unique id is used to fetch the relevant post data for processing.\r\n\r\n3. Item 3 Post Comparison and State Update: After fetching the post, the custom hook compares it to the corresponding entry in the oldPosts array (which holds previously fetched post data). If the post has changed—such as when the like/dislike count has been updated—the hook will update the Redux state with the new data. If the post differs from its previous state, it will be added to the posts array in Redux for UI reactivity.\r\n\r\n4. Item 4 Database Synchronization: Once the UI state is updated with the new like/dislike data, the hook ensures the changes are reflected in the Firebase database by sending an update request, ensuring consistency between the frontend and the backend.\r\n\r\n[Acces live](https://quote.gabrielchiorcea.tech/).\r\n\r\n```javascript\r\nimport { postActions } from '../store/post-slice';\r\nimport { useDispatch } from 'react-redux';\r\nconst useUpdate = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const mapPutVote = async (id, type, url) => {\r\n    const sendId = id;\r\n    const URL = url;\r\n\r\n    let response;\r\n    let comeFrom;\r\n    if (URL === process.env.REACT_APP_URL_POST) {\r\n      comeFrom = 'AllPosts';\r\n      response = await fetch(\r\n        process.env.REACT_APP_PrefixNormalDB + sendId + '.json'\r\n      );\r\n    } else {\r\n      comeFrom = 'MajorPosts';\r\n      response = await fetch(\r\n        process.env.REACT_APP_PrefixMajorDB + sendId + '.json'\r\n      );\r\n    }\r\n    const data = await response.json();\r\n    let notIncremented = data.vote;\r\n    \r\n    let isIncrmented;\r\n\r\n    if (type === 'increment') {\r\n      isIncrmented = ++notIncremented;\r\n    } else if (type === 'decrease' && notIncremented <= 0) {\r\n      isIncrmented = notIncremented;\r\n    } else {\r\n      isIncrmented = --notIncremented;\r\n    }\r\n\r\n    const sendVote = { vote: isIncrmented };\r\n    const newVote = sendVote.vote;\r\n    const sendPayload = {\r\n      comeFrom: comeFrom,\r\n      id: sendId,\r\n      vote: sendVote.vote,\r\n    };\r\n\r\n    let switchedUrl;\r\n\r\n    if (URL === process.env.REACT_APP_URL_BANC) {\r\n      switchedUrl = process.env.REACT_APP_PrefixNormalDB + sendId + '.json';\r\n    } else if (URL === process.env.REACT_APP_URL_MAJOR) {\r\n      switchedUrl = process.env.REACT_APP_PrefixMajorDB + sendId + '.json';\r\n    }\r\n    if (notIncremented > 0) {\r\n      setTimeout(() => {\r\n        fetch(switchedUrl, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify({ vote: newVote }),\r\n        });\r\n      }, 700);\r\n    }\r\n\r\n    dispatch(postActions.upDateOldPosts(sendPayload));\r\n\r\n  };\r\n  return { mapPutVote };\r\n};\r\n\r\nexport default useUpdate;\r\n\r\n```\r\n\r\n\r\n## More\r\n\r\n<div className=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![React 03.](/images/project/01-02.jpg)\r\n![React 03.](/images/project/01-03.jpg)\r\n</div>\r\n\r\n\r\n"},{"slug":"power","frontMatter":{"date":"2016-10-10","title":"Power","lang":"Build with React","description":"A frontend that sends an Excel file to a dedicated backend, processes the data, and generates visualizations based on the JSON response returned by the backend.","image":"/images/project/02.jpg","color":"#BE0000","category":"Frontend","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Timeline","data":"10-10-2024"},{"title":"Tehnology","data":"- React\n- SASS\n- Redux\n"},{"title":"Functions","data":"- Excel file uploading\n- HTTP requests\n- Excel data visualization\n \n"}],"live":[{"link":"https://excelreader.gabrielchiorcea.tech/"}]},"content":"\r\n## Description.\r\n\r\nThis frontend serves two primary and critical functions: processing an Excel file and handling JSON-formatted data received from the backend. The received data is utilized to create a summarized, tabular visualization of the Excel content, ensuring user-friendly data representation. The frontend operates in close connection with the backend project, Store, establishing a seamless backend-frontend integration to deliver an end-to-end solution as a final product.\r\n\r\nThis project is built using React for the user interface, Sass for styling, and Redux for state management.\r\n\r\n<div className=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![React 01.](/images/project/02-01.jpg)\r\n![React 02.](/images/project/02-02.jpg)\r\n![React 01.](/images/project/02-03.jpg)\r\n![React 02.](/images/project/02-04.jpg)\r\n</div>\r\n\r\n\r\n## Send the Excel\r\n\r\nThe ExcelAdIn component in React facilitates Excel file uploads and backend submission. It uses useState for managing file input, validation, and upload readiness, while useDispatch triggers Redux actions. The component validates files against .xlsx or .xls extensions and, upon validation, sends the file to the backend via a POST request at /excel, using FormData. It dynamically renders two views: a file input with a \"Validate\" button for initial upload and a \"Start\" button for submission. Modular CSS ensures styling, creating a user-friendly interface for seamless file upload and backend integration.\r\n\r\n```javascript\r\nconst ExcelAdIn = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [validate, setValidate] = useState(false);\r\n  const [isExcel, setIsExcel] = useState(false);\r\n  const [excelFile, setExcelFile] = useState(undefined);\r\n\r\n  const onSubmit = () => {\r\n    if (excelFile !== undefined) {\r\n      setIsExcel(true);\r\n    }\r\n  };\r\n\r\n  const excelReader = () => {\r\n    const allowedExtensions = ['.xlsx', '.xls'];\r\n\r\n    if (excelFile && allowedExtensions.includes(excelFile.name.slice(-5))) {\r\n      dispatch(excelAction.excelUpLoad(true));\r\n      const formData = new FormData();\r\n      formData.append('file', excelFile);\r\n      fetch('#########', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: formData,\r\n      }).then((response) => console.log(response.json()));\r\n      console.log(formData);\r\n    }\r\n  };\r\n\r\n  const start = (\r\n    <div className={style.container}>\r\n      <button className={style.start} onClick={excelReader}>\r\n        Start\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  const addExcel = (\r\n    <div className={style.container}>\r\n      {!validate && (\r\n        <div className={style.addExcel}>\r\n          <label htmlFor=\"file-input\" className={style.fileLabel}>\r\n            Add Excel\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".xlsx, .xls\"\r\n            className={style.fileInput}\r\n            onChange={(e) => {\r\n              setExcelFile(e.target.files[0]);\r\n              setValidate(true);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n      {validate && (\r\n        <button className={style.start} onClick={onSubmit}>\r\n          Validate\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return <Fragment>{isExcel ? start : addExcel}</Fragment>;\r\n};\r\n\r\nexport default ExcelAdIn;\r\n```\r\n\r\n\r\n\r\n## Custom Hook for Dynamic API Requests and Data Handling\r\n\r\nThe useQAfetch custom hook is designed to handle API interactions with a backend for various data retrieval or manipulation tasks related to Excel processing. It uses Redux's dispatch to update the application state based on the API responses. Here's a technical explanation:\r\n\r\n1. Hook Structure: The hook defines an asynchronous function, fetchServer, which accepts a string parameter that determines the API endpoint or function to call.\r\n\r\n2. Dynamic Endpoint Selection: Based on the provided string, the function appends it to a base URL to construct the endpoint dynamically. Specific cases, such as \"Count null value,\" \"Excel summary,\" and others, are handled with conditional logic.\r\n\r\n3. API Call: It uses the fetch API to make HTTP GET requests to the backend. If the string corresponds to an \"Under construction\" case, it directly dispatches a placeholder response without making a request.\r\n\r\n4. Response Parsing:\r\nThe response status is validated, and errors are caught and handled gracefully.\r\nFor valid responses, the JSON payload is parsed and structured into a standardized format, with fields like rows, columns, and max_value populated for specific strings.\r\n\r\n5. Data Dispatch: The parsed data is dispatched to the Redux store using an excelAction.excelResponse action. For \"fill NAN W 0,\" the response is further processed into an array before dispatching.\r\n\r\n6. Error Handling: If the request fails, the error message and response code are logged, and a standardized error response is dispatched to maintain consistency in the application's state.\r\n\r\n7. Flexibility: By accepting a string parameter, the hook can reuse the same logic for different backend functionalities, reducing code duplication and enhancing maintainability.\r\n\r\nThis custom hook encapsulates API interaction logic, making it modular and easier to integrate into various components that need backend communication.\r\n\r\n```javascript\r\nconst useQAfetch = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchServer = async (string) => {\r\n    const url = '#########';\r\n    let str = string;\r\n    let responseCode;\r\n    let dataRespons;\r\n    let fillNan = [];\r\n    try {\r\n      let response;\r\n      if (str === 'Count null value') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Excel summary') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Extract value') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Chart') {\r\n        response = await fetch(url + str);\r\n      } else if (str === 'Under costruction') {\r\n        dataRespons = {\r\n          res: 'Under costruction',\r\n          question: str,\r\n        };\r\n        console.log(dataRespons);\r\n        dispatch(excelAction.excelResponse(dataRespons));\r\n        return;\r\n      } else if (str === 'fill NAN W 0') {\r\n        response = await fetch(url + str);\r\n      } else {\r\n        response = await fetch(url + str);\r\n      }\r\n\r\n      responseCode = response.status;\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (str === 'Count null value') {\r\n        dataRespons = { res: data.value, question: str };\r\n      } else if (str === 'Excel summary') {\r\n        dataRespons = {\r\n          rows: data.rows,\r\n          columns: data.columns,\r\n          col_dtypes: data.col_dtypes,\r\n          max_value: data.max_value,\r\n          min_value: data.min_value,\r\n          question: str,\r\n        };\r\n      } else if (str === 'Extract value') {\r\n        dataRespons = {\r\n          value: data.value,\r\n          columns: data.columns,\r\n          row: data.row,\r\n          question: str,\r\n        };\r\n      } else if ('fill NAN W 0') {\r\n        dataRespons = data;\r\n        for (const key in dataRespons) {\r\n          fillNan.push({\r\n            id: dataRespons[key].column,\r\n            question: str,\r\n            column: dataRespons[key].column,\r\n            value: dataRespons[key].arr,\r\n          });\r\n        }\r\n      } else if (str === 'Chart') {\r\n        dataRespons = { res: data.value, question: str };\r\n      } else {\r\n        dataRespons = {\r\n          res: data.value,\r\n          question: str,\r\n        };\r\n      }\r\n\r\n      if (str === 'fill NAN W 0') {\r\n        dispatch(excelAction.excelResponse(fillNan));\r\n      } else {\r\n        dispatch(excelAction.excelResponse(dataRespons));\r\n      }\r\n    } catch (error) {\r\n      console.log(error, responseCode);\r\n      dataRespons = {\r\n        res: `We tryed to call the server but the server code is ${responseCode}`,\r\n        question: 'Error',\r\n      };\r\n      dispatch(excelAction.excelResponse(dataRespons));\r\n    }\r\n  };\r\n\r\n  return { fetchServer };\r\n};\r\n\r\nexport default useQAfetch;\r\n```\r\n\r\n## Chart Configuration and Visualization\r\n\r\nThe ChartSettings component is responsible for configuring a chart based on the selected columns from an Excel file, interacting with a backend API. Using useSelector, it extracts data from the application state, including existing responses and current chart configurations. The user can select columns for the X and Y axes, as well as the colors associated with them. These settings are then sent to the backend via a POST request in JSON format. If the request is successful, an image file (the generated chart) is returned, processed, and displayed to the user. The component also includes options to reset the current configuration and displays error messages if the data is invalid or the server request fails. All of these operations are handled using React, with state management via useState and useDispatch, and the interface dynamically updates as the user interacts with the data selection components.\r\n\r\n\r\n```javascript\r\nconst ChartSettings = () => {\r\n  const arr = useSelector((select) => select.exe.excelResponse);\r\n  const c = useSelector((state) => state.exe.chart);\r\n  const dispatch = useDispatch();\r\n  const [colXoane, setColXoane] = useState('');\r\n  const [colXtow, setColXtow] = useState('');\r\n  const [colY, setColY] = useState('');\r\n  const [full, setFull] = useState(false);\r\n  const [imageData, setImageData] = useState(null);\r\n  const [s, setS] = useState(false);\r\n  const [err, setErr] = useState(false);\r\n\r\n  const [selectedColorXoane, setSelectedColorXoane] = useState('Blue');\r\n  const [selectedColorXtow, setSelectedColorXtow] = useState('Blue');\r\n\r\n  const handleColorChangeXoane = (event) => {\r\n    setSelectedColorXoane(event.target.value);\r\n  };\r\n  const handleColorChangeXtow = (event) => {\r\n    setSelectedColorXtow(event.target.value);\r\n  };\r\n\r\n  const setCol = (name) => {\r\n    if (colXoane === '') {\r\n      setColXoane(name);\r\n    } else if (colXtow === '') {\r\n      setColXtow(name);\r\n      setFull(true);\r\n    } else if (colXoane !== '' && colXtow !== '') {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const setY = (name) => {\r\n    setColY(name);\r\n  };\r\n\r\n  const json = {\r\n    columnX1: [colXoane, selectedColorXoane],\r\n    columnX2: [colXtow, selectedColorXtow],\r\n    Y: colY,\r\n  };\r\n\r\n  const createChart = async () => {\r\n    try {\r\n      const response = await fetch('#########', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(json),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Eroare la cerere');\r\n      }\r\n      const blob = await response.blob();\r\n      const imageUrl = URL.createObjectURL(blob);\r\n      setImageData(imageUrl);\r\n      dispatch(excelAction.chart(true));\r\n      setS(true);\r\n    } catch (error) {\r\n      console.error(`An error occurred: ${error.message}`);\r\n      setErr('This combination does not make sens');\r\n    }\r\n    console.log(json);\r\n  };\r\n  const restore = () => {\r\n    setColXoane('');\r\n    setColXtow('');\r\n    setColY('');\r\n    setFull(false);\r\n    setImageData(null);\r\n    setS(false);\r\n    setSelectedColorXoane('Blue');\r\n    setSelectedColorXtow('Blue');\r\n    dispatch(excelAction.chart(false));\r\n    setErr(false);\r\n  };\r\n\r\n  const relode = (\r\n    <button className={btn.btn} onClick={restore}>\r\n      relode\r\n    </button>\r\n  );\r\n\r\n  const colNames = arr.res.map((el) => (\r\n    <ChartBtn key={el} name={el} col={el} onClick={full ? setY : setCol} />\r\n  ));\r\n\r\n  const tablesChios = (\r\n    <>\r\n      <table className={style.tableConatiner}>\r\n        <thead>\r\n          <tr>\r\n            <th className={style.thead}>Axis X</th>\r\n            <th className={style.thead}>Color for X</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td\r\n              className={style.tableContent}\r\n              style={{ color: selectedColorXoane, fontWeight: 'bold' }}\r\n            >\r\n              {colXoane}\r\n            </td>\r\n\r\n            <td className={style.tableContent}>\r\n              <select\r\n                className={style.select}\r\n                value={selectedColorXoane}\r\n                onChange={handleColorChangeXoane}\r\n              >\r\n                <option className={style.option} value=\"Blue\">\r\n                  Blue\r\n                </option>\r\n                <option className={style.option} value=\"Red\">\r\n                  Red\r\n                </option>\r\n                <option className={style.option} value=\"Green\">\r\n                  Green\r\n                </option>\r\n                <option className={style.option} value=\"Yellow\">\r\n                  Yellow\r\n                </option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td\r\n              className={style.tableContent}\r\n              style={{ color: selectedColorXtow, fontWeight: 'bold' }}\r\n            >\r\n              {colXtow}\r\n            </td>\r\n\r\n            <td className={style.tableContent}>\r\n              <select\r\n                value={selectedColorXtow}\r\n                onChange={handleColorChangeXtow}\r\n              >\r\n                <option value=\"Blue\">Albastru</option>\r\n                <option value=\"Red\">Roșu</option>\r\n                <option value=\"Green\">Verde</option>\r\n                <option value=\"Yellow\">Galben</option>\r\n              </select>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <table className={style.tableConatiner}>\r\n        <thead>\r\n          <tr>\r\n            <th className={style.thead}>Axis Y</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td className={style.tableContent} style={{ fontWeight: 'bold' }}>\r\n              {colY}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n\r\n  const img = (\r\n    <div className={style.imgChart}>\r\n      {imageData && (\r\n        <img className={style.img} src={imageData} alt=\"Descriere imagine\" />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  const chart = (\r\n    <div className={style.create}>\r\n      <div className={style.chartContainerBtn}>\r\n        <svg\r\n          className={style.svgBtn}\r\n          version=\"1.1\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n          viewBox=\"0 0 32 32\"\r\n        >\r\n          <path d=\"M29 0h-26c-1.65 0-3 1.35-3 3v26c0 1.65 1.35 3 3 3h26c1.65 0 3-1.35 3-3v-26c0-1.65-1.35-3-3-3zM14 24c0 1.1-0.9 2-2 2h-4c-1.1 0-2-0.9-2-2v-16c0-1.1 0.9-2 2-2h4c1.1 0 2 0.9 2 2v16zM26 18c0 1.1-0.9 2-2 2h-4c-1.1 0-2-0.9-2-2v-10c0-1.1 0.9-2 2-2h4c1.1 0 2 0.9 2 2v10z\"></path>\r\n        </svg>\r\n        <button onClick={createChart} className={style.chartBtnStart}>\r\n          Create\r\n        </button>\r\n      </div>\r\n      {err && (\r\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n          <span style={{ color: 'red' }}>{err}</span>\r\n          {relode}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {!s && colNames}\r\n      {s && relode}\r\n      <div className={s ? style.imgContainer : style.chartContainer}>\r\n        {!s && tablesChios}\r\n        {s ? img : chart}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChartSettings;\r\n```\r\n\r\n\r\n## Conclusion:\r\n\r\nThe front-end implementation demonstrates a well-structured and interactive approach for handling data visualization. It allows users to dynamically select columns for chart creation, customize colors, and submit requests to the backend. The component handles responses efficiently, displaying the generated chart as an image. With a focus on flexibility, it supports multiple combinations of input data and ensures proper error handling to provide a smooth user experience. The inclusion of a reset functionality allows for easy restoration of settings. This front-end approach integrates effectively with the backend, ensuring the process from data selection to chart generation is seamless, intuitive, and user-friendly.\r\n"},{"slug":"store","frontMatter":{"date":"2015-10-10","title":"Excel Store","lang":"Build with Python","description":"Backend with user creation and authentication, excel reading data and transfer in in JSON as response","image":"/images/project/05.jpg","color":"#BE0000","category":"Backend","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Release date","data":"07-06-2024"},{"title":"Tehnology","data":"- Python\n- Rest API\n- Panda\n"},{"title":"Functions","data":"- Excel to JSON \n- User account\n- Custome API\n- Chart creation \n"}],"live":[{"link":"https://excelstore.gabrielchiorcea.tech/"}]},"content":"\r\n## Arhitecture.\r\n\r\nThis application serves as a backend capable of processing and reading data from Excel files. To utilize this backend and connect it to a frontend, a user account is required. The account is essential as it provides a unique API key for authentication and authorization.\r\n\r\nExcel files are read using Pandas, which converts the file content into a DataFrame. Once transformed into a DataFrame, the data is further converted into JSON format based on the specific functions or filters requested. This enables dynamic and customizable data extraction from the Excel file.\r\n\r\nThe Excel file itself is stored in the database as a binary large object (BLOB), ensuring secure and efficient storage\r\n\r\n\r\n<div className=\"image columns-1 sm:columns-2 gap-8\">\r\n\r\n![Python 01.](/images/project/05-01.jpg)\r\n![Python 02.](/images/project/05-02.jpg)\r\n</div>\r\n\r\n\r\n## Get and store the excel file\r\n\r\nThe Excel file is uploaded via the /excel endpoint of the API. At this endpoint, the file undergoes validation to ensure it is an Excel file, even if the frontend does not perform this check. Once validated, the file is renamed for consistency and security.\r\n\r\nThe renaming process involves appending a unique ID, derived from the user’s API key, to the file name. The resulting format is {ID}.xlsx. The renamed file is then securely stored in the database as a BLOB with its new identifier, ensuring traceability and efficient management.\r\n\r\n\r\n```python\r\n@app.route('/excel', methods=['POST'])\r\n@csrf.exempt\r\ndef upload_excel():\r\n    try:\r\n        # Check if a file is present in the request\r\n        if 'file' not in request.files:\r\n            return jsonify({'res': 'No file found in the request'}), 400\r\n        \r\n        file_in = request.files['file']\r\n        id = request.args.get('id')\r\n\r\n        # Validate the user ID parameter\r\n        if not id:\r\n            return jsonify({'res': 'Missing user ID'}), 400\r\n\r\n        # Check if the file name is empty\r\n        if file_in.filename == '':\r\n            return jsonify({'res': 'File name is empty'}), 400\r\n\r\n        # Validate the file extension (only .xlsx and .xls are allowed)\r\n        if not (file_in.filename.endswith('.xlsx') or file_in.filename.endswith('.xls')):\r\n            return jsonify({'res': 'Invalid file type, only Excel files are allowed (.xlsx, .xls)'}), 400\r\n\r\n        file_content = file_in.read()\r\n        \r\n        # Ensure the file is not empty\r\n        if not file_content:\r\n            return jsonify({'res': 'Uploaded file is empty'}), 400\r\n\r\n        # Generate a unique name for the file based on the user ID\r\n        file_name = f\"{id}.xlsx\"\r\n\r\n        # Create a new database record for the Excel file\r\n        new_excel_file = Excel(name=file_name, excel=file_content)\r\n\r\n        # Add the file to the database session and commit\r\n        db.session.add(new_excel_file)\r\n        db.session.commit()\r\n\r\n        return jsonify({'res': 'File uploaded successfully'}), 200\r\n\r\n    except Exception as e:\r\n        # Roll back the database transaction in case of an error\r\n        db.session.rollback()\r\n        print(f\"Error: {e}\")  # Log the error details to the console\r\n        return jsonify({'res': f'An error occurred while processing the file: {str(e)}'}), 500\r\n\r\n```\r\n\r\n## How the backend know what data to give you\r\n\r\nThe below API endpoint, accessible via /<string:para>/<string:ident> with a GET request, dynamically processes Excel files stored in a database. It retrieves the file based on an id query parameter, reads it into a Pandas DataFrame, and executes specific functions depending on the para value (e.g., counting null values, extracting data, summarizing content, filling missing values, or generating charts). The user's existence and identification (ident) are validated against the database, and if necessary, new identification records are created. By utilizing specialized classes (RespondGet and ResponseFill), the endpoint ensures modular and efficient data manipulation while maintaining robust error handling and database consistency.\r\n\r\n\r\n```python\r\n@app.route('/<string:para>/<string:ident>', methods=['GET'])\r\n@csrf.exempt\r\ndef get_with_ident(para, ident):\r\n    identificare = quote(ident)\r\n    id = request.args.get('id')\r\n    filename = str(id)+'.xlsx'\r\n    retrieved_excel_file = Excel.query.filter_by(name=filename).first()\r\n    excel_data = retrieved_excel_file.excel\r\n    excel_df = pd.read_excel(io.BytesIO(excel_data))\r\n    isntance_of_class = RespondGet(excel_df, id)\r\n    isntance_of_fill = ResponseFill(excel_df, id)\r\n    exist = User.query.filter_by(identification=identificare).first()\r\n    identt = Identification.query.filter_by(identification=identificare).first()\r\n\r\n    if(exist != None  and identt != None):\r\n            if para == \"CountNullValue\":\r\n                count = isntance_of_class.resp_get_null()\r\n                return count\r\n            elif para == \"ExtractValue\":\r\n                ex_val = isntance_of_class.resp_get_ex_val()\r\n                return ex_val\r\n            elif para == \"ExcelSummary\":\r\n                sumar = isntance_of_class.resp_get_ex_sumar()\r\n                return sumar\r\n            elif para == 'fillNANW0':\r\n                fill_na = isntance_of_fill.fill_na()\r\n                return fill_na\r\n            elif para == 'Chart':\r\n                chart = isntance_of_class.chart_columns()\r\n                return chart\r\n    elif(exist and identt == None):\r\n\r\n        time = datetime.now()\r\n        ident = Identification(timestamp=time, identification= identificare)\r\n        db.session.add(ident)\r\n        db.session.commit()\r\n        if para == \"CountNullValue\":\r\n            count = isntance_of_class.resp_get_null()\r\n            return count\r\n        elif para == \"ExtractValue\":\r\n            ex_val = isntance_of_class.resp_get_ex_val()\r\n            return ex_val\r\n        elif para == \"ExcelSummary\":\r\n            sumar = isntance_of_class.resp_get_ex_sumar()\r\n            return sumar\r\n        elif para == 'fillNANW0':\r\n            fill_na = isntance_of_fill.fill_na()\r\n            return fill_na\r\n        elif para == 'Chart':\r\n            chart = isntance_of_class.chart_columns()\r\n            return chart\r\n    else:\r\n        return jsonify({'val': exist}), 400\r\n```\r\n\r\n\r\n\r\n"},{"slug":"backend","frontMatter":{"date":"2013-10-10","title":"Backend","lang":"Build with Python","description":"Flask-based backend application providing user authentication and profile management functionalities.","image":"/images/project/04.jpg","color":"#307B93","category":"Backend","projectInfo":[{"title":"Client","data":"World wide"},{"title":"Timeline","data":"In progress, but ready for tests"},{"title":"Tehnology","data":"- Python\n- PyJWT\n- Sqlalchemy/MySQL\n- Werkzeug\n"},{"title":"Functions","data":"- User Authentication\n- Profile Management\n- Account Management \n"}],"live":[{"link":"https://backend.gabrielchiorcea.tech/"}]},"content":"\r\n## Description\r\n\r\nThis backend is a Flask-based web application that provides user authentication and profile management functionalities. It is designed to handle user sign-up, login, profile updates, and account management. The backend interacts with a MySQL database using SQLAlchemy for ORM (Object-Relational Mapping).\r\nThis backend leverages a combination of Flask, SQLAlchemy, PyJWT, MySQL, and Werkzeug to provide a robust and secure user authentication and profile management system. Flask serves as the web framework, SQLAlchemy handles database interactions, PyJWT manages token-based authentication, MySQL stores user data, and Werkzeug provides essential utilities for web application development. This technology stack ensures efficient and secure handling of user data and authentication processes.\r\n\r\n\r\n## PyJWT Usage in This Backend\r\n\r\n#### How PyJWT is Used in This Backend:\r\n\r\n1. Token Generation:\r\nWhen a user logs in, a JWT is generated using the create_access_token function. This token includes the user's ID and an expiration time. The token is then sent in the database, to the client we give a code related to the token, which stores it and includes it in the Authorization header of subsequent requests.\r\n\r\n| id \t| session_string \t| jwt                                                   \t|\r\n|----\t|----------------\t|-------------------------------------------------------\t|\r\n| 44 \t| 8PBV22S        \t| eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6Z... \t|\r\n\r\nAs can be seen, nothing relate to the id of the user, the id is inside of jwt and need special decode for extract the ID.\r\n\r\n2. Token Verification:\r\nFor protected routes, the backend verifies the JWT included in the Authorization header of incoming requests. The token is decoded using the jwt.decode function, which extracts the user's ID and other claims. If the token is valid, the request is processed; otherwise, an error response is returned.\r\n\r\n3. Session Management:\r\nThe backend uses JWTs to manage user sessions. When a user logs in, a session is created with the generated token. This session is used to authenticate the user for subsequent requests.\r\n\r\n## Key Features: \r\n### User Authentication:\r\n\r\nSign-Up: Allows users to create an account by providing an email and password. This is keeped it simple.\r\n\r\n```python\r\n@main.route('/creare-cont' , methods=['POST'])\r\ndef insert_data():\r\n    data = request.get_json()\r\n    email = data.get('email')\r\n    password = data.get('password')\r\n    firstName = data.get('firstName')\r\n    lastName = data.get('lastName')\r\n    userName = data.get('username')\r\n\r\n    try: \r\n        has = HashPass.passwordHash(password) \r\n        new_user = User( userName, email, lastName, firstName , has)\r\n        db.session.add(new_user)\r\n        db.session.commit()\r\n        return jsonify({'message': \"The user account is create with succes\"}), 201\r\n    except SQLAlchemyError as e:\r\n        db.session.rollback()\r\n        return jsonify({'error': str(e)}), 500\r\n```\r\n### User Authentication:\r\n\r\nAbout HashPass.passwordHash(password) is a special medotdh I create to hash the password, validate email format and checking for missing fields are done in the FrontEnd, checking for existing email and username \r\nI have a separated function that is used in FrontEnd when input is out of focus, the function is call via API. \r\n\r\nLogin: Users can log in using their email and password. A JWT (JSON Web Token) is generated for authenticated sessions. Dummy profile and social link data are created for new users.\r\n\r\n```python\r\n        if user:\r\n            access_token = create_access_token(identity=check_user.id, expires_delta=datetime.timedelta(days=1))    \r\n            insert_session = Session(add_session_string, access_token)\r\n            dummy_profile = ProfileCard(\r\n                occupation=\"May I ask you what do you do?\",\r\n                homeaddress=\"How far are you ?\",\r\n                country=\"I guess you are from Nice ?\",\r\n                county=\"France ?\",\r\n                user_id=check_user.id,\r\n                image=b\"\"  \r\n            )\r\n            dummy_social_links = SocialLinks(\r\n                linkedin=\"https://linkedin.com/\",\r\n                facebook=\"https://facebook.com/\",\r\n                github=\"https://github.com/\",\r\n                instagram=\"https://instagram.com/\",\r\n                twitter=\"https://twitter.com/\",\r\n                youtube=\"https://youtube.com/\",\r\n                description=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\r\n                user_id=check_user.id\r\n            )            \r\n\r\n            db.session.add(insert_session)\r\n            db.session.commit()\r\n\r\n            db.session.add(dummy_profile)\r\n            db.session.commit()\r\n\r\n            db.session.add(dummy_social_links)\r\n            db.session.commit()\r\n            return jsonify({'message': add_session_string}), 200\r\n        else:   \r\n            return jsonify({'message': 'Password or user are incorrect'}), 202\r\n```\r\n\r\n### Profile Management:\r\n\r\nSet Contact Details: Allows users to update their contact details, including occupation, home address, country, county, and profile image.\r\n\r\n\r\nSet Social Links: Allows users to update their social links, such as LinkedIn, Facebook, GitHub, Instagram, Twitter, and YouTube.\r\n\r\n```python\r\n# Retrieve the existing social links\r\n            social_links = SocialLinks.query.filter_by(user_id=user_id).first()\r\n\r\n            if social_links:\r\n                # Update the existing social links with new data\r\n                social_links.linkedin = data.get(\"linkedIn\", social_links.linkedin)\r\n                social_links.facebook = data.get(\"faceBook\", social_links.facebook)                \r\n                social_links.github = data.get(\"gitHub\", social_links.github)            \r\n                social_links.instagram = data.get(\"instagram\", social_links.instagram)            \r\n                social_links.twitter = data.get(\"twitter\", social_links.twitter)                \r\n                social_links.youtube = data.get(\"youtube\", social_links.youtube)\r\n                social_links.description = data.get(\"description\", social_links.description)\r\n```\r\nI use this approach because this is an update.\r\n\r\n\r\nGet Profile: Retrieves the user's profile information, including occupation, home address, country, county, and social links.\r\n\r\n```python\r\n    try:\r\n        decoded_token = jwt.decode(ses.jwt, secret_key, algorithms=[\"xxxxx\"])\r\n        user_id = decoded_token.get('sub')  # Extract user ID from 'sub' key\r\n    except jwt.DecodeError as e:\r\n        return jsonify({'error': 'Invalid token format', 'message': str(e)}), 400\r\n    except jwt.ExpiredSignatureError:\r\n        return jsonify({'error': 'Token has expired'}), 401\r\n    except jwt.InvalidTokenError as e:\r\n        return jsonify({'error': 'Invalid token', 'message': str(e)}), 401\r\n\r\n\r\n\r\n        `````````````````````````````````````````````````````````````````````````````````````\r\n\r\n         profile = ProfileCard.query.filter_by(user_id=user_id).first()\r\n    social_links = SocialLinks.query.filter_by(user_id=user_id).first()\r\n    user = User.query.filter_by(id=user_id).first()\r\n    if not profile:\r\n        return jsonify({'error': 'Profile or user not found'}), 404\r\n    image_base64 = base64.b64encode(profile.image).decode('utf-8')\r\n    return jsonify({\r\n        'HomeAddress': profile.homeaddress,\r\n        'Country': profile.country,\r\n        'County': profile.county,\r\n        'Occupation': profile.occupation,\r\n        'Image': image_base64,  # Assuming image is stored as binary data\r\n        'FullName': ' '.join([user.first_name, user.last_name]),\r\n        'Email': user.email,\r\n        'LinkedIn': social_links.linkedin,\r\n        'FaceBook': social_links.facebook,\r\n        'GitHub': social_links.github,\r\n        'Instagram': social_links.instagram,\r\n        'Twitter': social_links.twitter,\r\n        'Youtube': social_links.youtube,\r\n        'Description': social_links.description\r\n\r\n    }), 200\r\n```\r\n\r\n### Account Management:\r\n\r\nEverything start with chinkd the jwt:\r\n\r\n```python\r\nses = Session.query.filter_by(session_string=token).first()\r\ndecoded_token = jwt.decode(ses.jwt, secret_key, algorithms=[\"#####\"])\r\n```\r\n\r\nChange Password: Allows users to change their password by providing the current password and a new password.\r\n```python\r\n # Verify the current password\r\n        if not HashPass.check_password(user.password, current_password):\r\n            return jsonify({'message': 'Current password is incorrect'}), 400\r\n\r\n        # Update the password\r\n        user.password = HashPass.passwordHash(new_password)\r\n        db.session.commit()\r\n```\r\n\r\nChange Email: Allows users to update their email address.\r\n```python\r\n user = User.query.filter_by(id=user_id).first()\r\n        if not user:\r\n            return jsonify({'message': 'User not found'}), 404\r\n\r\n        # Update the email\r\n        user.email = new_email\r\n        db.session.commit()\r\n```\r\nChange Username: Allows users to update their username, ensuring the new username is not already taken.\r\n```python\r\nexisting_user = User.query.filter_by(username=new_username).first()\r\n        if existing_user:\r\n            return jsonify({'message': 'Username already taken'}), 400\r\n\r\n        # Update the username\r\n        user.username = new_username\r\n        db.session.commit()\r\n```\r\n\r\nDelete Account: Allows users to delete their account and all related data, including profile and social links.\r\n```python\r\nser = User.query.filter_by(id=user_id).first()\r\n        if not user:\r\n            return jsonify({'message': 'User not found'}), 404\r\n\r\n        # Delete related records\r\n        ProfileCard.query.filter_by(user_id=user_id).delete()\r\n        SocialLinks.query.filter_by(user_id=user_id).delete()\r\n\r\n        # Delete the user record\r\n        db.session.delete(user)\r\n        db.session.commit()\r\n```\r\n\r\nTechnologies Used:\r\nFlask: A lightweight WSGI web application framework in Python.\r\nSQLAlchemy: An ORM library for managing database interactions.\r\nPyJWT: A Python library for working with JSON Web Tokens.\r\nMySQL: A relational database management system for storing user data.\r\nWerkzeug: A comprehensive WSGI web application library used for password hashing and security.\r\n\r\nExample Endpoints:\r\n1.  POST /intra-in-cont: Sign up a new user.\r\n2.  POST /login: Log in an existing user.\r\n3.  GET /getProfile: Retrieve the user's profile information.\r\n4.  POST /setContactDetail: Update the user's contact details.\r\n6.  POST /setSocialLink: Update the user's social links.\r\n7.  POST /changePassword: Change the user's password.\r\n8.  POST /changeEmail: Change the user's email address.\r\n9.  POST /changeUsername: Change the user's username.\r\n10. DELETE /deleteAccount: Delete the user's account and all related data.\r\n\r\nThis backend provides a robust foundation for user authentication and profile management, ensuring secure and efficient handling of user data.\r\n\r\nThis description provides a comprehensive overview of the backend's functionality, key features, and technologies used. Adjust the details as needed to match your specific implementation.\r\n\r\n\r\n"},{"slug":"server","frontMatter":{"date":"2004-01-10","title":"Hosting Server","description":"A fully configured server to host all of my projects.","image":"/images/project/06.jpg","color":"#BE0000","category":"Server","projectInfo":[{"title":"Client","data":"Worldwide"},{"title":"Timeline","data":"Completed"},{"title":"Hosting Stack","data":"- **Operating System:** Ubuntu 20.04 LTS\n- **Firewall:** UFW (Uncomplicated Firewall)\n- **Database:** MariaDB\n- **Web Server:** Nginx\n- **Application Server:** Gunicorn\n- **Programming Language:** Python\n- **CI/CD Pipeline:** Jenkins\n- **Monitoring & Logging:** Prometheus & Grafana\n- **Backup & Recovery:** BorgBackup & Restic\n- **Infrastructure as Code:** Ansible & Terraform\n"},{"title":"Functions","data":"- High-performance web hosting\n- Automated deployment\n- Secure and scalable infrastructure\n- Continuous monitoring and alerting\n- Automated backups and disaster recovery\n"}],"live":[{"link":"#"}]},"content":"\r\n## Server Configuration\r\n\r\nTo analyze the implemented configurations, a live session can be arranged where I will provide access for a joint review.\r\n\r\nThis project represents a dedicated hosting server for all my applications, configured to provide performance, security, and scalability. The server is optimized to run modern applications with minimal response time and high reliability.\r\n\r\n### **Firewall (UFW)**\r\nUncomplicated Firewall (UFW) is configured to protect the server by restricting access to necessary ports.\r\n- HTTP (80) and HTTPS (443) for web access\r\n- SSH with IP restrictions for security, dedicate IP.\r\n- Custom ports for internal services\r\n- Rate limiting for brute-force attack protection\r\n\r\n###  **Operating System - Ubuntu 20.04 LTS**\r\nUbuntu 20.04 LTS was chosen for its stability, long-term support, and excellent compatibility with most server-side applications.\r\n- Optimized kernel for performance and security\r\n- Swap tuning for efficient memory management\r\n- Automatic security updates and periodic security audits\r\n\r\n###  **MariaDB - Database Management System**\r\nMariaDB is installed to support applications that require data storage, especially those involving user authentication and account management.\r\n- Configured with master-slave replication for redundancy\r\n- Optimized for performance using query caching and indexing\r\n- Automatic daily backup and fast recovery when needed\r\n- Secure access via SSL connections and role-based authentication\r\n\r\n\r\n```ini\r\n[mysqld]\r\nbind-address = 127.0.0.1\r\nmax_connections = 500\r\nthread_cache_size = 128\r\ntable_open_cache = 4000\r\nquery_cache_type = 1\r\nquery_cache_size = 64M\r\nquery_cache_limit = 2M\r\ntmp_table_size = 64M\r\nmax_heap_table_size = 64M\r\ninnodb_buffer_pool_size = 1G\r\ninnodb_log_file_size = 256M\r\ninnodb_flush_log_at_trx_commit = 1\r\ninnodb_flush_method = O_DIRECT\r\ninnodb_file_per_table = 1\r\ninnodb_read_io_threads = 8\r\ninnodb_write_io_threads = 8\r\nlog_error = /var/log/mysql/error.log\r\nslow_query_log = 1\r\nslow_query_log_file = /var/log/mysql/slow.log\r\nlong_query_time = 1\r\nserver-id = 1\r\nlog_bin = /var/log/mysql/mysql-bin.log\r\nexpire_logs_days = 10\r\n\r\n```\r\n\r\n### **Nginx - Web Server and Reverse Proxy**\r\nNginx was chosen for its high performance and capability to function as a reverse proxy for Python-based web applications.\r\n- Configured with gzip and static caching for improved load speeds\r\n- Supports HTTP/2 and SSL with Certbot for security\r\n- Load balancing and failover for high availability\r\n- Rate limiting to prevent DDoS attacks\r\n\r\n\r\n#### `nginx.conf` (Optimized Nginx Reverse Proxy Configuration with SSL & HTTP/2)\r\n```nginx\r\nserver {\r\n    listen 80;\r\n    server_name excelstore.gabrielchiorcea.texh;\r\n    return 301 https://$host$request_uri;\r\n}\r\n\r\nserver {\r\n    listen 443 ssl http2;\r\n    server_name excelstore.gabrielchiorcea.texh;\r\n\r\n    ssl_certificate /etc/letsencrypt/live/excelstore.gabrielchiorcea.texh/fullchain.pem;\r\n    ssl_certificate_key /etc/letsencrypt/live/excelstore.gabrielchiorcea.texh/privkey.pem;\r\n    ssl_protocols TLSv1.2 TLSv1.3;\r\n    ssl_ciphers HIGH:!aNULL:!MD5;\r\n\r\n    location / {\r\n        proxy_pass http://127.0.0.1:8000;\r\n        proxy_set_header Host $host;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n        proxy_set_header X-Forwarded-Proto https;\r\n    }\r\n\r\n    client_max_body_size 10M;\r\n    gzip on;\r\n    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\r\n}\r\n```\r\n\r\n\r\n### **Gunicorn - Python Application Server**\r\nGunicorn is used to run Python applications and ensure scalability.\r\n- Configured as a systemd daemon for maximum uptime\r\n- Uses worker threads to efficiently manage multiple connections\r\n- Automatic restart in case of failure for increased resilience\r\n- Supports WebSocket connections and asynchronous processing\r\n\r\n\r\n#### `gunicorn.service` (Optimized Systemd Service for Gunicorn)\r\n```ini\r\n[Unit]\r\nDescription= excelstore\r\nAfter=network.target\r\n\r\n[Service]\r\nUser=www-data\r\nGroup=www-data\r\nWorkingDirectory=/var/www/....\r\nExecStart=/usr/bin/gunicorn --workers 4 --threads 2 --bind 0.0.0.0:8000 --access-logfile /var/log/gunicorn/access.log --error-logfile /var/log/gunicorn/error.log wsgi:app\r\n\r\nRestart=always\r\nLimitNOFILE=4096\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n\r\n\r\n\r\n### **Jenkins - CI/CD Pipeline**\r\nJenkins is configured to automate the deployment process.\r\n- Integrated with GitHub for automatic deployment\r\n- Pipeline defined with Bash scripts to manage code in the document root\r\n- Configured with SSL for secure access\r\n- Auto-build trigger on every commit\r\n\r\n### **Monitoring and Logging**\r\nTo ensure maximum uptime and rapid issue detection, the server includes:\r\n- **Prometheus & Grafana** for metric monitoring and visual dashboards\r\n- **Fail2Ban** to detect and block unauthorized access attempts\r\n- **Elasticsearch & Kibana** for logging and traffic analysis\r\n\r\n### **Backup and Disaster Recovery**\r\nTo protect data, the server has an automated backup and recovery system:\r\n- **BorgBackup & Restic** for encrypted incremental backups\r\n- **Automatic snapshots** for quick restoration\r\n- **Disaster recovery plan** to restore the system in case of an attack\r\n\r\n### **Automation and Security**\r\nFor each new project, I have created an automation script that:\r\n- Automatically configures the application directory and Nginx vhost\r\n- Generates and installs SSL via Certbot\r\n- Adds the DNS zone in Cloudflare for easier management\r\n- Creates backups and configures automatic monitoring\r\n\r\nThe server runs in a KVM virtualized environment, providing flexibility in resource allocation and easy migration.\r\n\r\nThis project demonstrates my knowledge of administering and configuring a professional hosting server capable of running modern applications in a secure and scalable environment.\r\n\r\n---\r\n\r\n\r\n\r\n\r\n"}]},"__N_SSG":true}