{"pageProps":{"currentPost":{"slug":"Memoization","frontMatter":{"title":"How to Optimize React Performance with Memoization","description":"React apps can become slow and unresponsive as they grow larger and more complex. One powerful way to boost performance is by using **memoization** ‚Äî a technique that caches the results of expensive function calls and returns the cached result when the same inputs occur again.","image":"/images/blog/react.png","date":"2025-06-16","category":"Server"},"content":"\n\n   \n\n# How to Optimize React Performance with Memoization üöÄ\n\n  \n\nReact apps can become slow and unresponsive as they grow larger and more complex. One powerful way to boost performance is by using **memoization** ‚Äî a technique that caches the results of expensive function calls and returns the cached result when the same inputs occur again.\n\n  \n\nIn this post, I‚Äôll walk you through how to use memoization effectively in React, focusing on the built-in hooks and components that help you avoid unnecessary re-renders.\n\n  \n\n---\n\n  \n\n## What is Memoization?\n\n  \n\nMemoization is an optimization technique that stores (\"memoizes\") the result of a function call based on its inputs. If the function is called again with the same inputs, the cached result is returned instead of recomputing.\n\n  \n\nIn React, this helps prevent unnecessary rendering and computation, which can improve app responsiveness and reduce CPU usage.\n\n  \n\n---\n\n  \n\n## React Memoization Tools\n\n  \n\nReact provides several tools to help with memoization:\n\n  \n\n- `React.memo` ‚Äî memoizes functional components, preventing re-render if props don‚Äôt change.\n\n- `useMemo` ‚Äî memoizes the result of a calculation between renders.\n\n- `useCallback` ‚Äî memoizes a callback function reference, preventing unnecessary re-creations.\n\n  \n\n---\n\n  \n\n## When to Use `React.memo`\n\n  \n\nUse `React.memo` to wrap functional components that receive props and only need to re-render when those props change.\n\n  \n\n```jsx\n\nimport React from  'react';\n\n  \n\nconst  ExpensiveComponent  = React.memo(({ data }) => {\n\nconsole.log('Rendering ExpensiveComponent');\n\n// expensive calculations or rendering here\n\nreturn <div>{data}</div>;\n\n});\n```\n\n## Using useMemo for Expensive Calculations\n\nIf you have heavy computations inside your component, use useMemo to cache the results:\n\n  \n\n```jsx\nimport React, { useMemo } from  'react';\n\n  \n\nfunction  Fibonacci({ n }) {\n\n// useMemo will recompute the value only when `n` changes\n\nconst  fib  =  useMemo(() => {\n\nfunction  calcFib(num) {\n\nif (num <=  1) return  1;\n\nreturn  calcFib(num -  1) +  calcFib(num -  2);\n\n}\nreturn  calcFib(n);\n\n}, [n]); // dependency array: recalc only if `n` changes\n\nreturn <div>Fibonacci number: {fib}</div>;\n\n}\n```\n  \n\n## Why use useMemo here?\n\nWithout useMemo, the calcFib function  would  be  called  on  every  render, which  can  be  very  expensive  especially  for  large  n.\n\nWith  useMemo, React  caches  the  result  of  the  calculation  and  only  recomputes  it  if  n  changes, saving  CPU  time  and  improving  performance.\n\n\n# Using  useCallback  to  Memoize  Functions\n\nPassing  inline  functions  as  props  causes  child  components  to  re-render  unnecessarily  because  every  render  creates  a  new  function  reference.\n\n\nuseCallback  returns  a  memoized  version  of  the  function  that  only  changes  if  its  dependencies  change.\n\n  \n\n```jsx\n\nimport  React, { useState, useCallback } from 'react';\n\nconst Button = React.memo(({ onClick, children }) => {\n\nconsole.log('Button rendered');\n\nreturn <button  onClick={onClick}>{children}</button>;\n\n});\n\n\nfunction  Parent() {\n\nconst [count, setCount] =  useState(0);\n\n  \n\n// Memoize increment function to prevent new function creation on every render\n\nconst  increment  =  useCallback(() => {\n\nsetCount(c  => c +  1);\n\n}, []); // empty dependency array means function stays the same\n\n  \n\nreturn (\n\n<div>\n\n<p>Count: {count}</p>\n\n<Button  onClick={increment}>Increment</Button>\n\n</div>\n\n);\n\n}\n```\n\n## Why use useCallback?\n\nWithout useCallback, the increment function  would  be  recreated  on  every  render.\n\n  \n\nThis  causes  Button  to  re-render  even  if  its  props  appear  unchanged.\n\n  \n\nWith  useCallback, the  function  reference  stays  the  same  between  renders  unless  dependencies  change, so  Button  only  re-renders  when  needed.\n\n  \n\nSummary\n\n1. Use  React.memo  to  memoize  entire  functional  components  to  avoid  unnecessary  re-renders  when  props  are  unchanged.\n\n  \n\n2. Use  useMemo  to  memoize  expensive  calculations  inside  components.\n\n  \n\n3. Use  useCallback  to  memoize  functions  passed  as  props  to  prevent  unnecessary  re-creation  of  functions  and  child  re-renders.\n\n  \n\nProper  use  of  these  memoization  techniques  can  help  your  React  apps  run  faster  and  more  efficiently."},"previousPost":{"slug":"VibeCoding","frontMatter":{"title":"Vibe Coding: The Future of No-Code Programming","description":"Imagine telling your computer *exactly* what you want ‚Äî in plain English ‚Äî and watching it magically turn your ideas into working code. That‚Äôs the essence of **Vibe Coding**, a fresh wave in programming powered by natural language processing (NLP) and AI.","image":"/images/blog/vibecoding.png","date":"2025-06-17","category":"Programing"},"content":"\n\n# Vibe Coding: The Future of No-Code Programming?\n\n---\n\n## What is Vibe Coding?\n\nImagine telling your computer *exactly* what you want ‚Äî in plain English ‚Äî and watching it magically turn your ideas into working code. That‚Äôs the essence of **Vibe Coding**, a fresh wave in programming powered by natural language processing (NLP) and AI.\n\nUnlike traditional coding where you painstakingly type every line, vibe coding lets you express the ‚Äúvibe‚Äù or feeling of your project. The AI understands context, intent, and nuances, and then generates code that matches your vision. It‚Äôs like having a programming partner who just *gets* you.\n\n---\n\n## Why Should Developers Care?\n\nVibe coding isn‚Äôt just a gimmick. It‚Äôs reshaping how software gets built:\n\n- **Speeds up prototyping:** Build MVPs (minimum viable products) faster without sweating the syntax.\n- **Bridges skill gaps:** Non-technical folks can now describe what they want and get a starting point.\n- **Boosts creativity:** Focus on solving problems rather than memorizing syntax or APIs.\n- **Enables collaboration:** Devs and AI can pair-program ‚Äî the AI handles boilerplate, you handle logic.\n\n---\n\n## How Does It Work?\n\nAt its core, vibe coding relies on advanced NLP models trained on billions of lines of code and text. You provide a natural language prompt, such as:\n\n> ‚ÄúBuild a simple to-do app with React that saves data locally.‚Äù\n\nThe AI parses your request, generates code snippets, stitches them together, and sometimes even writes tests! Tools like GitHub Copilot, OpenAI‚Äôs Codex, and newer platforms like Devin and Cursor are pioneering this space.\n\n---\n\n## The Catch: Limitations & Risks\n\nNo technology is perfect. Vibe coding can:\n\n- Produce buggy or inefficient code that requires human review.\n- Misinterpret vague or ambiguous prompts.\n- Generate code that‚Äôs hard to maintain without understanding what‚Äôs ‚Äúunder the hood.‚Äù\n- Risk developer skill atrophy if over-relied on.\n\nBottom line: vibe coding is an assistant, not a replacement.\n\n---\n\n\n\n## The Road Ahead\n\nVibe coding is still in its infancy, but it‚Äôs clear the writing‚Äôs on the wall. As NLP models get smarter, expect to see more powerful, intuitive, and reliable programming assistants that change *how* we build software.\n\nFor developers, embracing vibe coding means enhancing your workflow with AI ‚Äî not handing over the keys. The future is about collaboration between human creativity and machine efficiency.\n\n---\n\n## Final Thoughts\n\nIf you‚Äôre a developer, product manager, or tech enthusiast, it‚Äôs time to pay attention. Vibe coding could be the *next big leap* in software development ‚Äî one where *your words* become your code.\n\n---\n"},"nextPost":{"slug":"django-ubuntu-22-04-gunicorn-nginx","frontMatter":{"title":"Guide to Setting Up a Django Server with Nginx and Gunicorn","description":"This step-by-step guide will show you how to set up a web server for your Django app using Nginx and Gunicorn on an Ubuntu server. We'll walk you through everything from installing the necessary packages to configuring your environment to run Django in production. Let's get started!","image":"/images/blog/django.jpg","date":"2025-01-04","category":"Server"},"content":"\n\n## Preparing the Server\n\nFirst things first: we need to update your server and install the essential packages.\n\n -  Run these commands to update and install everything you need:\n\n```bash\nsudo apt update && sudo apt upgrade -y\nsudo apt install python3-pip python3-venv python3-dev libpq-dev nginx -y\n```\n\nHere‚Äôs what each package is for:\n\n- `python3-pip`: The tool that lets you install Python packages you‚Äôll need for your app.\n    \n- `python3-venv`: Allows you to create a virtual environment for Python‚Äîthis keeps things nice and clean.\n    \n- `python3-dev`: Development headers and libraries for building Python packages.\n    \n- `libpq-dev`: Required for connecting your Django app to PostgreSQL if you're using that as your database.\n    \n-  `nginx`: This is the web server we‚Äôre going to use to serve your Django app.\n\n----------\n\n### Creating the App Directory\n\nNow let‚Äôs create the directory where your Django app will live and set the right permissions.\n\n1.  Make the directory:\n\n```bash\nsudo mkdir -p /var/www/domain.com/app\n```\n2.  Set the correct permissions:\n\n```bash\nsudo chown -R $USER:$USER /var/www/domain.com/app\nsudo chmod -R 755 /var/www/domain.com\n``` \nWhat‚Äôs happening here:\n-   `mkdir -p`: Makes sure all the necessary folders are created (even the ones in the path).\n  \n-   `chown`: Changes the ownership of the directory to the current user (you).\n  \n-  `chmod`: Ensures the right read/execute permissions for the directory.\n\n----------\n\n### Configuring Nginx for Your App\n\nNow it‚Äôs time to set up Nginx to serve your Django app. Let‚Äôs create a configuration file for your domain.\n\n1.  Create the config file:\n```bash\nsudo nano /etc/nginx/sites-available/domain.com\n```\n\n2.  Add the following content to the file:\n\n\n```bash\n`server {\n    listen 80;\n    server_name domain.com www.domain.com;\n\n    root /var/www/domain.com/html;\n    index index.html;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }\n}` \n```\nWhat‚Äôs happening here:\n -   `listen 80`: Tells Nginx to listen for HTTP traffic on port 80 (the standard for web traffic).\n    \n -   `server_name`: This specifies which domains Nginx should handle with this config.\n   \n -  `try_files`: It checks if the requested files exist. If not, it returns a 404 error.\n\n----------\n\n### Setting Up SSL with Let's Encrypt\n\nFor added security, you should use HTTPS. If you don‚Äôt already have an SSL certificate, Let‚Äôs Encrypt is a free, trusted option.\n\n1.  First, let‚Äôs redirect all HTTP traffic to HTTPS:\n\n\n```bash\nserver {\n    listen 80;\n    server_name domain.com www.domain.com;\n    return 301 https://$host$request_uri;\n}\n```\n\n2.  Next, let‚Äôs set up the HTTPS server configuration:\n\n```bash\nserver {\n    listen 443 ssl;\n    server_name domain.com www.domain.com;\n\n    ssl_certificate /etc/letsencrypt/live/domain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/domain.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static/ {\n        alias /var/www/domain.com/app/static/;\n    }\n}\n``` \n\n Here‚Äôs what‚Äôs going on:\n-   `proxy_pass`: This tells Nginx to forward incoming requests to Gunicorn (which will run your Django app on port 8000).\n    \n-   `alias`: This directs Nginx to the static files folder where your Django app will store its static assets.\n\n----------\n\n### Activating the Nginx Configuration and Restarting the Service\n\nNow that we‚Äôve got Nginx set up, let‚Äôs activate the configuration and restart Nginx.\n\n1.  Enable the site by creating a symbolic link:\n\n```bash\nsudo ln -s /etc/nginx/sites-available/domain.com /etc/nginx/sites-enabled/` \n```\n\n2.  Check for configuration errors:\n```bash\nsudo nginx -t\n```\n\n3.  If everything checks out, restart Nginx:\n```bash\nsudo systemctl restart nginx\n```\n\n----------\n\n## Setting Up the Django Project\n\nNext, let‚Äôs get your Django project set up and ready to go!\n\n1.  Create a virtual environment for Python:\n\n```bash\ncd /var/www/domain.com/app\npython3 -m venv venv\nsource venv/bin/activate \n```\n\n2.  Install Django and Gunicorn:\n\n```bash\npip install django gunicorn \n```\n\n----------\n\n### Creating the Django Project\n\n1.  Now, let‚Äôs create a new Django project:\n\n```bash\ndjango-admin startproject myproject .\n```\n\n2.  To test that everything‚Äôs running, start the Django development server:\n\n```bash\npython3 manage.py runserver\n```\n\n----------\n\n### Configuring Static Files\n\n1.  Create the static files directory:\n\n```bash\nmkdir -p /var/www/domain.com/app/static\n```\n\n2.  Update `settings.py` to point to the correct location for static files:\n\n\n```bash\nSTATIC_ROOT = \"/var/www/domain.com/app/static/\"\nSTATIC_URL = \"/static/\"\n```\n\n3.  Collect all the static files:\n```bash\npython manage.py collectstatic\n```\n-----------\n#### In Django, handling static files‚Äîlike CSS, JavaScript, and images‚Äîrequires special attention because of how static content is served in production versus development. Let‚Äôs break it down:\n\nWhy Static Files Need Configuration ?\n\nBy default, Django is optimized for development, and during development, it automatically serves static files using its built-in development server. However, this approach isn't suitable for production due to performance and security concerns. Instead:\n\nIn Development:\n\n   - Django's development server (e.g., when you run python manage.py runserver) handles static files directly, pulling them from the STATICFILES_DIRS or app-specific static folders (<app_name>/static).\nYou don't need to create or configure STATIC_ROOT or manually run collectstatic.\n\nIn Production:\n\n   - A web server like Nginx or Apache should serve static files. This ensures better performance since serving static assets isn‚Äôt what Django‚Äôs application server (like Gunicorn) is designed for.\nDjango needs all static files from various apps to be gathered into a single directory, specified by STATIC_ROOT. This is why the collectstatic command is necessary.\nWithout a properly set STATIC_ROOT, you can't collect and serve static files efficiently in production.\n\nWhy Create the Directory Manually?\n\n   - The directory defined by STATIC_ROOT (e.g., /var/www/domain.com/app/static/) is where Django collects all static files when you run:\n\n```bash\npython manage.py collectstatic\n```\n\nYou need to create this directory manually because:\n\n1. It's not automatically created by Django: Django only expects the STATIC_ROOT setting to point to an existing location.\n  \n2. Flexibility in deployment: You might want the static directory to be in a specific location, independent of Django‚Äôs project structure. For example, /var/www/... is commonly used in production setups.\n   \nDo You Need This in Both Production and Development?\n   - In Production: Yes, always. The STATIC_ROOT directory and the collectstatic process are essential in production environments because Django doesn‚Äôt serve static files directly. Instead, the web server (e.g., Nginx) will use the collected files.\n   - In Development: Not typically. Django's development server handles static files automatically using the STATICFILES_DIRS and app-specific static folders. You don't need to configure STATIC_ROOT or run collectstatic.\n\nIf you're testing a production-like environment locally, you might set it up in development to mirror production, but it‚Äôs optional.\n\n#### Key Takeaway\n\nThe manual creation of the STATIC_ROOT directory and running collectstatic are production-specific requirements. In development, Django simplifies the process, but in production, separating the app logic from static file serving is critical for performance and scalability.\n\n-----------\n4.  Set the right permissions on the static files folder:\n\n```bash\nsudo chown -R www-data:www-data /var/www/domain.com/app/static\nsudo chmod -R 755 /var/www/domain.com/app/static\n```\n\n\n\n### Setting Up the Gunicorn Service\n\nGunicorn will serve your Django app, so let‚Äôs set it up with a systemd service.\n\n1.  Create the Gunicorn service file:\n\n```bash\nsudo nano /etc/systemd/system/gunicorn.service\n```\n\n2.  Add the following configuration:\n\n```bash\n[Unit]\nDescription=gunicorn daemon for Django project\nAfter=network.target\n\n[Service]\nUser=www-data\nGroup=www-data\nWorkingDirectory=/var/www/domain.com/app\nExecStart=/var/www/domain.com/app/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 myproject.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n```\n\n3.  Check the permissions:\n\n```bash\nls -l /etc/systemd/system/gunicorn.service\n```\n\nIf the permissions need fixing:\n\n```bash\nsudo chmod 644 /etc/systemd/system/gunicorn.service\n```\n\n----------\n\n### Starting the Gunicorn Service\n\n1.  Enable and start Gunicorn:\n\n```bash\nsudo systemctl start gunicorn\nsudo systemctl enable gunicorn\n```\n\n\n2.  To check that everything‚Äôs working:\n\n\n```bash\nsudo systemctl status gunicorn\n``` \n\n----------\n\nAnd that‚Äôs it! You‚Äôve successfully set up your Django app with Nginx and Gunicorn. Your app is now ready to handle traffic in production, and you‚Äôve ensured it‚Äôs secure and performant. Enjoy the smooth sailing!\n"}},"__N_SSG":true}